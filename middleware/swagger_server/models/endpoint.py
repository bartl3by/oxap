# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.endpoint_interface import EndpointInterface
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Endpoint(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, description: str=None, interface: List[EndpointInterface]=None):
        """
        Endpoint - a model defined in Swagger

        :param id: The id of this Endpoint.
        :type id: int
        :param name: The name of this Endpoint.
        :type name: str
        :param description: The description of this Endpoint.
        :type description: str
        :param interface: The interface of this Endpoint.
        :type interface: List[EndpointInterface]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'description': str,
            'interface': List[EndpointInterface]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'interface': 'interface'
        }

        self._id = id
        self._name = name
        self._description = description
        self._interface = interface

    @classmethod
    def from_dict(cls, dikt) -> 'Endpoint':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Endpoint of this Endpoint.
        :rtype: Endpoint
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Endpoint.
        

        :return: The id of this Endpoint.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Endpoint.
        

        :param id: The id of this Endpoint.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Endpoint.
        

        :return: The name of this Endpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Endpoint.
        

        :param name: The name of this Endpoint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this Endpoint.
        

        :return: The description of this Endpoint.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Endpoint.
        

        :param description: The description of this Endpoint.
        :type description: str
        """

        self._description = description

    @property
    def interface(self) -> List[EndpointInterface]:
        """
        Gets the interface of this Endpoint.

        :return: The interface of this Endpoint.
        :rtype: List[EndpointInterface]
        """
        return self._interface

    @interface.setter
    def interface(self, interface: List[EndpointInterface]):
        """
        Sets the interface of this Endpoint.

        :param interface: The interface of this Endpoint.
        :type interface: List[EndpointInterface]
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")

        self._interface = interface

