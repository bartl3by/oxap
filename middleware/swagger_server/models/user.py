# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class User(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aliases: str=None, anniversary: date=None, assistant_name: str=None, birthday: date=None, branches: str=None, business_category: str=None, categories: str=None, cellular_telephone1: str=None, cellular_telephone2: str=None, city_business: str=None, city_home: str=None, city_other: str=None, commercial_register: str=None, company: str=None, contextadmin: bool=None, country_business: str=None, country_home: str=None, country_other: str=None, default_sender_address: str=None, drive_user_folder_mode: str=None, default_group: object=None, department: str=None, display_name: str=None, email: str=None, email1: str=None, email2: str=None, email3: str=None, employee_type: str=None, fax_business: str=None, fax_home: str=None, fax_other: str=None, filestore_id: int=None, filestore_name: str=None, folder_tree: int=None, given_name: str=None, gui_preferences_for_soap: object=None, gui_spam_filter_enabled: bool=None, id: int=None, imap_login: str=None, imap_port: int=None, imap_schema: str=None, imap_server: str=None, imap_server_string: str=None, info: str=None, instant_messenger1: str=None, instant_messenger2: str=None, language: str=None, mail_folder_confirmed_ham_name: str=None, mail_folder_confirmed_spam_name: str=None, mail_folder_drafts_name: str=None, mail_folder_sent_name: str=None, mail_folder_spam_name: str=None, mail_folder_trash_name: str=None, mailenabled: bool=None, manager_name: str=None, marital_status: str=None, max_quota: int=None, middle_name: str=None, name: str=None, nickname: str=None, note: str=None, number_of_children: str=None, number_of_employee: str=None, password: str=None, password_mech: str=None, password_expired: bool=None, position: str=None, postal_code_business: str=None, postal_code_home: str=None, postal_code_other: str=None, primary_email: str=None, profession: str=None, room_number: str=None, sales_volume: str=None, smtp_port: int=None, smtp_schema: str=None, smtp_server: str=None, smtp_server_string: str=None, spouse_name: str=None, state_business: str=None, state_home: str=None, state_other: str=None, street_business: str=None, street_home: str=None, street_other: str=None, suffix: str=None, sur_name: str=None, tax_id: str=None, telephone_assistant: str=None, telephone_business1: str=None, telephone_business2: str=None, telephone_callback: str=None, telephone_car: str=None, telephone_company: str=None, telephone_home1: str=None, telephone_home2: str=None, telephone_ip: str=None, telephone_isdn: str=None, telephone_other: str=None, telephone_pager: str=None, telephone_primary: str=None, telephone_radio: str=None, telephone_telex: str=None, telephone_ttytdd: str=None, timezone: str=None, title: str=None, upload_file_size_limit: int=None, upload_file_size_limit_per_file: int=None, url: str=None, used_quota: int=None, user_attributes: object=None, userfield01: str=None, userfield02: str=None, userfield03: str=None, userfield04: str=None, userfield05: str=None, userfield06: str=None, userfield07: str=None, userfield08: str=None, userfield09: str=None, userfield10: str=None, userfield11: str=None, userfield12: str=None, userfield13: str=None, userfield14: str=None, userfield15: str=None, userfield16: str=None, userfield17: str=None, userfield18: str=None, userfield19: str=None, userfield20: str=None, primary_account_name: str=None, convert_drive_user_folders: bool=None):
        """
        User - a model defined in Swagger

        :param aliases: The aliases of this User.
        :type aliases: str
        :param anniversary: The anniversary of this User.
        :type anniversary: date
        :param assistant_name: The assistant_name of this User.
        :type assistant_name: str
        :param birthday: The birthday of this User.
        :type birthday: date
        :param branches: The branches of this User.
        :type branches: str
        :param business_category: The business_category of this User.
        :type business_category: str
        :param categories: The categories of this User.
        :type categories: str
        :param cellular_telephone1: The cellular_telephone1 of this User.
        :type cellular_telephone1: str
        :param cellular_telephone2: The cellular_telephone2 of this User.
        :type cellular_telephone2: str
        :param city_business: The city_business of this User.
        :type city_business: str
        :param city_home: The city_home of this User.
        :type city_home: str
        :param city_other: The city_other of this User.
        :type city_other: str
        :param commercial_register: The commercial_register of this User.
        :type commercial_register: str
        :param company: The company of this User.
        :type company: str
        :param contextadmin: The contextadmin of this User.
        :type contextadmin: bool
        :param country_business: The country_business of this User.
        :type country_business: str
        :param country_home: The country_home of this User.
        :type country_home: str
        :param country_other: The country_other of this User.
        :type country_other: str
        :param default_sender_address: The default_sender_address of this User.
        :type default_sender_address: str
        :param drive_user_folder_mode: The drive_user_folder_mode of this User.
        :type drive_user_folder_mode: str
        :param default_group: The default_group of this User.
        :type default_group: object
        :param department: The department of this User.
        :type department: str
        :param display_name: The display_name of this User.
        :type display_name: str
        :param email: The email of this User.
        :type email: str
        :param email1: The email1 of this User.
        :type email1: str
        :param email2: The email2 of this User.
        :type email2: str
        :param email3: The email3 of this User.
        :type email3: str
        :param employee_type: The employee_type of this User.
        :type employee_type: str
        :param fax_business: The fax_business of this User.
        :type fax_business: str
        :param fax_home: The fax_home of this User.
        :type fax_home: str
        :param fax_other: The fax_other of this User.
        :type fax_other: str
        :param filestore_id: The filestore_id of this User.
        :type filestore_id: int
        :param filestore_name: The filestore_name of this User.
        :type filestore_name: str
        :param folder_tree: The folder_tree of this User.
        :type folder_tree: int
        :param given_name: The given_name of this User.
        :type given_name: str
        :param gui_preferences_for_soap: The gui_preferences_for_soap of this User.
        :type gui_preferences_for_soap: object
        :param gui_spam_filter_enabled: The gui_spam_filter_enabled of this User.
        :type gui_spam_filter_enabled: bool
        :param id: The id of this User.
        :type id: int
        :param imap_login: The imap_login of this User.
        :type imap_login: str
        :param imap_port: The imap_port of this User.
        :type imap_port: int
        :param imap_schema: The imap_schema of this User.
        :type imap_schema: str
        :param imap_server: The imap_server of this User.
        :type imap_server: str
        :param imap_server_string: The imap_server_string of this User.
        :type imap_server_string: str
        :param info: The info of this User.
        :type info: str
        :param instant_messenger1: The instant_messenger1 of this User.
        :type instant_messenger1: str
        :param instant_messenger2: The instant_messenger2 of this User.
        :type instant_messenger2: str
        :param language: The language of this User.
        :type language: str
        :param mail_folder_confirmed_ham_name: The mail_folder_confirmed_ham_name of this User.
        :type mail_folder_confirmed_ham_name: str
        :param mail_folder_confirmed_spam_name: The mail_folder_confirmed_spam_name of this User.
        :type mail_folder_confirmed_spam_name: str
        :param mail_folder_drafts_name: The mail_folder_drafts_name of this User.
        :type mail_folder_drafts_name: str
        :param mail_folder_sent_name: The mail_folder_sent_name of this User.
        :type mail_folder_sent_name: str
        :param mail_folder_spam_name: The mail_folder_spam_name of this User.
        :type mail_folder_spam_name: str
        :param mail_folder_trash_name: The mail_folder_trash_name of this User.
        :type mail_folder_trash_name: str
        :param mailenabled: The mailenabled of this User.
        :type mailenabled: bool
        :param manager_name: The manager_name of this User.
        :type manager_name: str
        :param marital_status: The marital_status of this User.
        :type marital_status: str
        :param max_quota: The max_quota of this User.
        :type max_quota: int
        :param middle_name: The middle_name of this User.
        :type middle_name: str
        :param name: The name of this User.
        :type name: str
        :param nickname: The nickname of this User.
        :type nickname: str
        :param note: The note of this User.
        :type note: str
        :param number_of_children: The number_of_children of this User.
        :type number_of_children: str
        :param number_of_employee: The number_of_employee of this User.
        :type number_of_employee: str
        :param password: The password of this User.
        :type password: str
        :param password_mech: The password_mech of this User.
        :type password_mech: str
        :param password_expired: The password_expired of this User.
        :type password_expired: bool
        :param position: The position of this User.
        :type position: str
        :param postal_code_business: The postal_code_business of this User.
        :type postal_code_business: str
        :param postal_code_home: The postal_code_home of this User.
        :type postal_code_home: str
        :param postal_code_other: The postal_code_other of this User.
        :type postal_code_other: str
        :param primary_email: The primary_email of this User.
        :type primary_email: str
        :param profession: The profession of this User.
        :type profession: str
        :param room_number: The room_number of this User.
        :type room_number: str
        :param sales_volume: The sales_volume of this User.
        :type sales_volume: str
        :param smtp_port: The smtp_port of this User.
        :type smtp_port: int
        :param smtp_schema: The smtp_schema of this User.
        :type smtp_schema: str
        :param smtp_server: The smtp_server of this User.
        :type smtp_server: str
        :param smtp_server_string: The smtp_server_string of this User.
        :type smtp_server_string: str
        :param spouse_name: The spouse_name of this User.
        :type spouse_name: str
        :param state_business: The state_business of this User.
        :type state_business: str
        :param state_home: The state_home of this User.
        :type state_home: str
        :param state_other: The state_other of this User.
        :type state_other: str
        :param street_business: The street_business of this User.
        :type street_business: str
        :param street_home: The street_home of this User.
        :type street_home: str
        :param street_other: The street_other of this User.
        :type street_other: str
        :param suffix: The suffix of this User.
        :type suffix: str
        :param sur_name: The sur_name of this User.
        :type sur_name: str
        :param tax_id: The tax_id of this User.
        :type tax_id: str
        :param telephone_assistant: The telephone_assistant of this User.
        :type telephone_assistant: str
        :param telephone_business1: The telephone_business1 of this User.
        :type telephone_business1: str
        :param telephone_business2: The telephone_business2 of this User.
        :type telephone_business2: str
        :param telephone_callback: The telephone_callback of this User.
        :type telephone_callback: str
        :param telephone_car: The telephone_car of this User.
        :type telephone_car: str
        :param telephone_company: The telephone_company of this User.
        :type telephone_company: str
        :param telephone_home1: The telephone_home1 of this User.
        :type telephone_home1: str
        :param telephone_home2: The telephone_home2 of this User.
        :type telephone_home2: str
        :param telephone_ip: The telephone_ip of this User.
        :type telephone_ip: str
        :param telephone_isdn: The telephone_isdn of this User.
        :type telephone_isdn: str
        :param telephone_other: The telephone_other of this User.
        :type telephone_other: str
        :param telephone_pager: The telephone_pager of this User.
        :type telephone_pager: str
        :param telephone_primary: The telephone_primary of this User.
        :type telephone_primary: str
        :param telephone_radio: The telephone_radio of this User.
        :type telephone_radio: str
        :param telephone_telex: The telephone_telex of this User.
        :type telephone_telex: str
        :param telephone_ttytdd: The telephone_ttytdd of this User.
        :type telephone_ttytdd: str
        :param timezone: The timezone of this User.
        :type timezone: str
        :param title: The title of this User.
        :type title: str
        :param upload_file_size_limit: The upload_file_size_limit of this User.
        :type upload_file_size_limit: int
        :param upload_file_size_limit_per_file: The upload_file_size_limit_per_file of this User.
        :type upload_file_size_limit_per_file: int
        :param url: The url of this User.
        :type url: str
        :param used_quota: The used_quota of this User.
        :type used_quota: int
        :param user_attributes: The user_attributes of this User.
        :type user_attributes: object
        :param userfield01: The userfield01 of this User.
        :type userfield01: str
        :param userfield02: The userfield02 of this User.
        :type userfield02: str
        :param userfield03: The userfield03 of this User.
        :type userfield03: str
        :param userfield04: The userfield04 of this User.
        :type userfield04: str
        :param userfield05: The userfield05 of this User.
        :type userfield05: str
        :param userfield06: The userfield06 of this User.
        :type userfield06: str
        :param userfield07: The userfield07 of this User.
        :type userfield07: str
        :param userfield08: The userfield08 of this User.
        :type userfield08: str
        :param userfield09: The userfield09 of this User.
        :type userfield09: str
        :param userfield10: The userfield10 of this User.
        :type userfield10: str
        :param userfield11: The userfield11 of this User.
        :type userfield11: str
        :param userfield12: The userfield12 of this User.
        :type userfield12: str
        :param userfield13: The userfield13 of this User.
        :type userfield13: str
        :param userfield14: The userfield14 of this User.
        :type userfield14: str
        :param userfield15: The userfield15 of this User.
        :type userfield15: str
        :param userfield16: The userfield16 of this User.
        :type userfield16: str
        :param userfield17: The userfield17 of this User.
        :type userfield17: str
        :param userfield18: The userfield18 of this User.
        :type userfield18: str
        :param userfield19: The userfield19 of this User.
        :type userfield19: str
        :param userfield20: The userfield20 of this User.
        :type userfield20: str
        :param primary_account_name: The primary_account_name of this User.
        :type primary_account_name: str
        :param convert_drive_user_folders: The convert_drive_user_folders of this User.
        :type convert_drive_user_folders: bool
        """
        self.swagger_types = {
            'aliases': str,
            'anniversary': date,
            'assistant_name': str,
            'birthday': date,
            'branches': str,
            'business_category': str,
            'categories': str,
            'cellular_telephone1': str,
            'cellular_telephone2': str,
            'city_business': str,
            'city_home': str,
            'city_other': str,
            'commercial_register': str,
            'company': str,
            'contextadmin': bool,
            'country_business': str,
            'country_home': str,
            'country_other': str,
            'default_sender_address': str,
            'drive_user_folder_mode': str,
            'default_group': object,
            'department': str,
            'display_name': str,
            'email': str,
            'email1': str,
            'email2': str,
            'email3': str,
            'employee_type': str,
            'fax_business': str,
            'fax_home': str,
            'fax_other': str,
            'filestore_id': int,
            'filestore_name': str,
            'folder_tree': int,
            'given_name': str,
            'gui_preferences_for_soap': object,
            'gui_spam_filter_enabled': bool,
            'id': int,
            'imap_login': str,
            'imap_port': int,
            'imap_schema': str,
            'imap_server': str,
            'imap_server_string': str,
            'info': str,
            'instant_messenger1': str,
            'instant_messenger2': str,
            'language': str,
            'mail_folder_confirmed_ham_name': str,
            'mail_folder_confirmed_spam_name': str,
            'mail_folder_drafts_name': str,
            'mail_folder_sent_name': str,
            'mail_folder_spam_name': str,
            'mail_folder_trash_name': str,
            'mailenabled': bool,
            'manager_name': str,
            'marital_status': str,
            'max_quota': int,
            'middle_name': str,
            'name': str,
            'nickname': str,
            'note': str,
            'number_of_children': str,
            'number_of_employee': str,
            'password': str,
            'password_mech': str,
            'password_expired': bool,
            'position': str,
            'postal_code_business': str,
            'postal_code_home': str,
            'postal_code_other': str,
            'primary_email': str,
            'profession': str,
            'room_number': str,
            'sales_volume': str,
            'smtp_port': int,
            'smtp_schema': str,
            'smtp_server': str,
            'smtp_server_string': str,
            'spouse_name': str,
            'state_business': str,
            'state_home': str,
            'state_other': str,
            'street_business': str,
            'street_home': str,
            'street_other': str,
            'suffix': str,
            'sur_name': str,
            'tax_id': str,
            'telephone_assistant': str,
            'telephone_business1': str,
            'telephone_business2': str,
            'telephone_callback': str,
            'telephone_car': str,
            'telephone_company': str,
            'telephone_home1': str,
            'telephone_home2': str,
            'telephone_ip': str,
            'telephone_isdn': str,
            'telephone_other': str,
            'telephone_pager': str,
            'telephone_primary': str,
            'telephone_radio': str,
            'telephone_telex': str,
            'telephone_ttytdd': str,
            'timezone': str,
            'title': str,
            'upload_file_size_limit': int,
            'upload_file_size_limit_per_file': int,
            'url': str,
            'used_quota': int,
            'user_attributes': object,
            'userfield01': str,
            'userfield02': str,
            'userfield03': str,
            'userfield04': str,
            'userfield05': str,
            'userfield06': str,
            'userfield07': str,
            'userfield08': str,
            'userfield09': str,
            'userfield10': str,
            'userfield11': str,
            'userfield12': str,
            'userfield13': str,
            'userfield14': str,
            'userfield15': str,
            'userfield16': str,
            'userfield17': str,
            'userfield18': str,
            'userfield19': str,
            'userfield20': str,
            'primary_account_name': str,
            'convert_drive_user_folders': bool
        }

        self.attribute_map = {
            'aliases': 'aliases',
            'anniversary': 'anniversary',
            'assistant_name': 'assistant_name',
            'birthday': 'birthday',
            'branches': 'branches',
            'business_category': 'business_category',
            'categories': 'categories',
            'cellular_telephone1': 'cellular_telephone1',
            'cellular_telephone2': 'cellular_telephone2',
            'city_business': 'city_business',
            'city_home': 'city_home',
            'city_other': 'city_other',
            'commercial_register': 'commercial_register',
            'company': 'company',
            'contextadmin': 'contextadmin',
            'country_business': 'country_business',
            'country_home': 'country_home',
            'country_other': 'country_other',
            'default_sender_address': 'defaultSenderAddress',
            'drive_user_folder_mode': 'driveUserFolderMode',
            'default_group': 'default_group',
            'department': 'department',
            'display_name': 'display_name',
            'email': 'email',
            'email1': 'email1',
            'email2': 'email2',
            'email3': 'email3',
            'employee_type': 'employeeType',
            'fax_business': 'fax_business',
            'fax_home': 'fax_home',
            'fax_other': 'fax_other',
            'filestore_id': 'filestoreId',
            'filestore_name': 'filestore_name',
            'folder_tree': 'folderTree',
            'given_name': 'given_name',
            'gui_preferences_for_soap': 'guiPreferencesForSoap',
            'gui_spam_filter_enabled': 'gui_spam_filter_enabled',
            'id': 'id',
            'imap_login': 'imapLogin',
            'imap_port': 'imapPort',
            'imap_schema': 'imapSchema',
            'imap_server': 'imapServer',
            'imap_server_string': 'imapServerString',
            'info': 'info',
            'instant_messenger1': 'instant_messenger1',
            'instant_messenger2': 'instant_messenger2',
            'language': 'language',
            'mail_folder_confirmed_ham_name': 'mail_folder_confirmed_ham_name',
            'mail_folder_confirmed_spam_name': 'mail_folder_confirmed_spam_name',
            'mail_folder_drafts_name': 'mail_folder_drafts_name',
            'mail_folder_sent_name': 'mail_folder_sent_name',
            'mail_folder_spam_name': 'mail_folder_spam_name',
            'mail_folder_trash_name': 'mail_folder_trash_name',
            'mailenabled': 'mailenabled',
            'manager_name': 'manager_name',
            'marital_status': 'marital_status',
            'max_quota': 'maxQuota',
            'middle_name': 'middle_name',
            'name': 'name',
            'nickname': 'nickname',
            'note': 'note',
            'number_of_children': 'number_of_children',
            'number_of_employee': 'number_of_employee',
            'password': 'password',
            'password_mech': 'passwordMech',
            'password_expired': 'password_expired',
            'position': 'position',
            'postal_code_business': 'postal_code_business',
            'postal_code_home': 'postal_code_home',
            'postal_code_other': 'postal_code_other',
            'primary_email': 'primaryEmail',
            'profession': 'profession',
            'room_number': 'room_number',
            'sales_volume': 'sales_volume',
            'smtp_port': 'smtpPort',
            'smtp_schema': 'smtpSchema',
            'smtp_server': 'smtpServer',
            'smtp_server_string': 'smtpServerString',
            'spouse_name': 'spouse_name',
            'state_business': 'state_business',
            'state_home': 'state_home',
            'state_other': 'state_other',
            'street_business': 'street_business',
            'street_home': 'street_home',
            'street_other': 'street_other',
            'suffix': 'suffix',
            'sur_name': 'sur_name',
            'tax_id': 'tax_id',
            'telephone_assistant': 'telephone_assistant',
            'telephone_business1': 'telephone_business1',
            'telephone_business2': 'telephone_business2',
            'telephone_callback': 'telephone_callback',
            'telephone_car': 'telephone_car',
            'telephone_company': 'telephone_company',
            'telephone_home1': 'telephone_home1',
            'telephone_home2': 'telephone_home2',
            'telephone_ip': 'telephone_ip',
            'telephone_isdn': 'telephone_isdn',
            'telephone_other': 'telephone_other',
            'telephone_pager': 'telephone_pager',
            'telephone_primary': 'telephone_primary',
            'telephone_radio': 'telephone_radio',
            'telephone_telex': 'telephone_telex',
            'telephone_ttytdd': 'telephone_ttytdd',
            'timezone': 'timezone',
            'title': 'title',
            'upload_file_size_limit': 'uploadFileSizeLimit',
            'upload_file_size_limit_per_file': 'uploadFileSizeLimitPerFile',
            'url': 'url',
            'used_quota': 'usedQuota',
            'user_attributes': 'userAttributes',
            'userfield01': 'userfield01',
            'userfield02': 'userfield02',
            'userfield03': 'userfield03',
            'userfield04': 'userfield04',
            'userfield05': 'userfield05',
            'userfield06': 'userfield06',
            'userfield07': 'userfield07',
            'userfield08': 'userfield08',
            'userfield09': 'userfield09',
            'userfield10': 'userfield10',
            'userfield11': 'userfield11',
            'userfield12': 'userfield12',
            'userfield13': 'userfield13',
            'userfield14': 'userfield14',
            'userfield15': 'userfield15',
            'userfield16': 'userfield16',
            'userfield17': 'userfield17',
            'userfield18': 'userfield18',
            'userfield19': 'userfield19',
            'userfield20': 'userfield20',
            'primary_account_name': 'primaryAccountName',
            'convert_drive_user_folders': 'convert_drive_user_folders'
        }

        self._aliases = aliases
        self._anniversary = anniversary
        self._assistant_name = assistant_name
        self._birthday = birthday
        self._branches = branches
        self._business_category = business_category
        self._categories = categories
        self._cellular_telephone1 = cellular_telephone1
        self._cellular_telephone2 = cellular_telephone2
        self._city_business = city_business
        self._city_home = city_home
        self._city_other = city_other
        self._commercial_register = commercial_register
        self._company = company
        self._contextadmin = contextadmin
        self._country_business = country_business
        self._country_home = country_home
        self._country_other = country_other
        self._default_sender_address = default_sender_address
        self._drive_user_folder_mode = drive_user_folder_mode
        self._default_group = default_group
        self._department = department
        self._display_name = display_name
        self._email = email
        self._email1 = email1
        self._email2 = email2
        self._email3 = email3
        self._employee_type = employee_type
        self._fax_business = fax_business
        self._fax_home = fax_home
        self._fax_other = fax_other
        self._filestore_id = filestore_id
        self._filestore_name = filestore_name
        self._folder_tree = folder_tree
        self._given_name = given_name
        self._gui_preferences_for_soap = gui_preferences_for_soap
        self._gui_spam_filter_enabled = gui_spam_filter_enabled
        self._id = id
        self._imap_login = imap_login
        self._imap_port = imap_port
        self._imap_schema = imap_schema
        self._imap_server = imap_server
        self._imap_server_string = imap_server_string
        self._info = info
        self._instant_messenger1 = instant_messenger1
        self._instant_messenger2 = instant_messenger2
        self._language = language
        self._mail_folder_confirmed_ham_name = mail_folder_confirmed_ham_name
        self._mail_folder_confirmed_spam_name = mail_folder_confirmed_spam_name
        self._mail_folder_drafts_name = mail_folder_drafts_name
        self._mail_folder_sent_name = mail_folder_sent_name
        self._mail_folder_spam_name = mail_folder_spam_name
        self._mail_folder_trash_name = mail_folder_trash_name
        self._mailenabled = mailenabled
        self._manager_name = manager_name
        self._marital_status = marital_status
        self._max_quota = max_quota
        self._middle_name = middle_name
        self._name = name
        self._nickname = nickname
        self._note = note
        self._number_of_children = number_of_children
        self._number_of_employee = number_of_employee
        self._password = password
        self._password_mech = password_mech
        self._password_expired = password_expired
        self._position = position
        self._postal_code_business = postal_code_business
        self._postal_code_home = postal_code_home
        self._postal_code_other = postal_code_other
        self._primary_email = primary_email
        self._profession = profession
        self._room_number = room_number
        self._sales_volume = sales_volume
        self._smtp_port = smtp_port
        self._smtp_schema = smtp_schema
        self._smtp_server = smtp_server
        self._smtp_server_string = smtp_server_string
        self._spouse_name = spouse_name
        self._state_business = state_business
        self._state_home = state_home
        self._state_other = state_other
        self._street_business = street_business
        self._street_home = street_home
        self._street_other = street_other
        self._suffix = suffix
        self._sur_name = sur_name
        self._tax_id = tax_id
        self._telephone_assistant = telephone_assistant
        self._telephone_business1 = telephone_business1
        self._telephone_business2 = telephone_business2
        self._telephone_callback = telephone_callback
        self._telephone_car = telephone_car
        self._telephone_company = telephone_company
        self._telephone_home1 = telephone_home1
        self._telephone_home2 = telephone_home2
        self._telephone_ip = telephone_ip
        self._telephone_isdn = telephone_isdn
        self._telephone_other = telephone_other
        self._telephone_pager = telephone_pager
        self._telephone_primary = telephone_primary
        self._telephone_radio = telephone_radio
        self._telephone_telex = telephone_telex
        self._telephone_ttytdd = telephone_ttytdd
        self._timezone = timezone
        self._title = title
        self._upload_file_size_limit = upload_file_size_limit
        self._upload_file_size_limit_per_file = upload_file_size_limit_per_file
        self._url = url
        self._used_quota = used_quota
        self._user_attributes = user_attributes
        self._userfield01 = userfield01
        self._userfield02 = userfield02
        self._userfield03 = userfield03
        self._userfield04 = userfield04
        self._userfield05 = userfield05
        self._userfield06 = userfield06
        self._userfield07 = userfield07
        self._userfield08 = userfield08
        self._userfield09 = userfield09
        self._userfield10 = userfield10
        self._userfield11 = userfield11
        self._userfield12 = userfield12
        self._userfield13 = userfield13
        self._userfield14 = userfield14
        self._userfield15 = userfield15
        self._userfield16 = userfield16
        self._userfield17 = userfield17
        self._userfield18 = userfield18
        self._userfield19 = userfield19
        self._userfield20 = userfield20
        self._primary_account_name = primary_account_name
        self._convert_drive_user_folders = convert_drive_user_folders

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.
        :rtype: User
        """
        return deserialize_model(dikt, cls)

    @property
    def aliases(self) -> str:
        """
        Gets the aliases of this User.
        The aliases of a user

        :return: The aliases of this User.
        :rtype: str
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases: str):
        """
        Sets the aliases of this User.
        The aliases of a user

        :param aliases: The aliases of this User.
        :type aliases: str
        """

        self._aliases = aliases

    @property
    def anniversary(self) -> date:
        """
        Gets the anniversary of this User.
        The anniversary date of a user

        :return: The anniversary of this User.
        :rtype: date
        """
        return self._anniversary

    @anniversary.setter
    def anniversary(self, anniversary: date):
        """
        Sets the anniversary of this User.
        The anniversary date of a user

        :param anniversary: The anniversary of this User.
        :type anniversary: date
        """

        self._anniversary = anniversary

    @property
    def assistant_name(self) -> str:
        """
        Gets the assistant_name of this User.
        The assistant name of a user

        :return: The assistant_name of this User.
        :rtype: str
        """
        return self._assistant_name

    @assistant_name.setter
    def assistant_name(self, assistant_name: str):
        """
        Sets the assistant_name of this User.
        The assistant name of a user

        :param assistant_name: The assistant_name of this User.
        :type assistant_name: str
        """

        self._assistant_name = assistant_name

    @property
    def birthday(self) -> date:
        """
        Gets the birthday of this User.
        The birthday of a user

        :return: The birthday of this User.
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday: date):
        """
        Sets the birthday of this User.
        The birthday of a user

        :param birthday: The birthday of this User.
        :type birthday: date
        """

        self._birthday = birthday

    @property
    def branches(self) -> str:
        """
        Gets the branches of this User.
        The branches of a user

        :return: The branches of this User.
        :rtype: str
        """
        return self._branches

    @branches.setter
    def branches(self, branches: str):
        """
        Sets the branches of this User.
        The branches of a user

        :param branches: The branches of this User.
        :type branches: str
        """

        self._branches = branches

    @property
    def business_category(self) -> str:
        """
        Gets the business_category of this User.
        The business category of a user

        :return: The business_category of this User.
        :rtype: str
        """
        return self._business_category

    @business_category.setter
    def business_category(self, business_category: str):
        """
        Sets the business_category of this User.
        The business category of a user

        :param business_category: The business_category of this User.
        :type business_category: str
        """

        self._business_category = business_category

    @property
    def categories(self) -> str:
        """
        Gets the categories of this User.
        The categories of a user

        :return: The categories of this User.
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories: str):
        """
        Sets the categories of this User.
        The categories of a user

        :param categories: The categories of this User.
        :type categories: str
        """

        self._categories = categories

    @property
    def cellular_telephone1(self) -> str:
        """
        Gets the cellular_telephone1 of this User.
        The cellular telephone 1 of a user

        :return: The cellular_telephone1 of this User.
        :rtype: str
        """
        return self._cellular_telephone1

    @cellular_telephone1.setter
    def cellular_telephone1(self, cellular_telephone1: str):
        """
        Sets the cellular_telephone1 of this User.
        The cellular telephone 1 of a user

        :param cellular_telephone1: The cellular_telephone1 of this User.
        :type cellular_telephone1: str
        """

        self._cellular_telephone1 = cellular_telephone1

    @property
    def cellular_telephone2(self) -> str:
        """
        Gets the cellular_telephone2 of this User.
        The cellular telephone 2 of a user

        :return: The cellular_telephone2 of this User.
        :rtype: str
        """
        return self._cellular_telephone2

    @cellular_telephone2.setter
    def cellular_telephone2(self, cellular_telephone2: str):
        """
        Sets the cellular_telephone2 of this User.
        The cellular telephone 2 of a user

        :param cellular_telephone2: The cellular_telephone2 of this User.
        :type cellular_telephone2: str
        """

        self._cellular_telephone2 = cellular_telephone2

    @property
    def city_business(self) -> str:
        """
        Gets the city_business of this User.
        The city (business) of a user

        :return: The city_business of this User.
        :rtype: str
        """
        return self._city_business

    @city_business.setter
    def city_business(self, city_business: str):
        """
        Sets the city_business of this User.
        The city (business) of a user

        :param city_business: The city_business of this User.
        :type city_business: str
        """

        self._city_business = city_business

    @property
    def city_home(self) -> str:
        """
        Gets the city_home of this User.
        The city (home) of a user

        :return: The city_home of this User.
        :rtype: str
        """
        return self._city_home

    @city_home.setter
    def city_home(self, city_home: str):
        """
        Sets the city_home of this User.
        The city (home) of a user

        :param city_home: The city_home of this User.
        :type city_home: str
        """

        self._city_home = city_home

    @property
    def city_other(self) -> str:
        """
        Gets the city_other of this User.
        Other city of a user

        :return: The city_other of this User.
        :rtype: str
        """
        return self._city_other

    @city_other.setter
    def city_other(self, city_other: str):
        """
        Sets the city_other of this User.
        Other city of a user

        :param city_other: The city_other of this User.
        :type city_other: str
        """

        self._city_other = city_other

    @property
    def commercial_register(self) -> str:
        """
        Gets the commercial_register of this User.
        The commercial register of a user

        :return: The commercial_register of this User.
        :rtype: str
        """
        return self._commercial_register

    @commercial_register.setter
    def commercial_register(self, commercial_register: str):
        """
        Sets the commercial_register of this User.
        The commercial register of a user

        :param commercial_register: The commercial_register of this User.
        :type commercial_register: str
        """

        self._commercial_register = commercial_register

    @property
    def company(self) -> str:
        """
        Gets the company of this User.
        The company of a user

        :return: The company of this User.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """
        Sets the company of this User.
        The company of a user

        :param company: The company of this User.
        :type company: str
        """

        self._company = company

    @property
    def contextadmin(self) -> bool:
        """
        Gets the contextadmin of this User.
        Is the user a context admin?

        :return: The contextadmin of this User.
        :rtype: bool
        """
        return self._contextadmin

    @contextadmin.setter
    def contextadmin(self, contextadmin: bool):
        """
        Sets the contextadmin of this User.
        Is the user a context admin?

        :param contextadmin: The contextadmin of this User.
        :type contextadmin: bool
        """

        self._contextadmin = contextadmin

    @property
    def country_business(self) -> str:
        """
        Gets the country_business of this User.
        The country (business) of a user

        :return: The country_business of this User.
        :rtype: str
        """
        return self._country_business

    @country_business.setter
    def country_business(self, country_business: str):
        """
        Sets the country_business of this User.
        The country (business) of a user

        :param country_business: The country_business of this User.
        :type country_business: str
        """

        self._country_business = country_business

    @property
    def country_home(self) -> str:
        """
        Gets the country_home of this User.
        The country (home) of a user

        :return: The country_home of this User.
        :rtype: str
        """
        return self._country_home

    @country_home.setter
    def country_home(self, country_home: str):
        """
        Sets the country_home of this User.
        The country (home) of a user

        :param country_home: The country_home of this User.
        :type country_home: str
        """

        self._country_home = country_home

    @property
    def country_other(self) -> str:
        """
        Gets the country_other of this User.
        Other country of a user

        :return: The country_other of this User.
        :rtype: str
        """
        return self._country_other

    @country_other.setter
    def country_other(self, country_other: str):
        """
        Sets the country_other of this User.
        Other country of a user

        :param country_other: The country_other of this User.
        :type country_other: str
        """

        self._country_other = country_other

    @property
    def default_sender_address(self) -> str:
        """
        Gets the default_sender_address of this User.
        The default sender address of a user

        :return: The default_sender_address of this User.
        :rtype: str
        """
        return self._default_sender_address

    @default_sender_address.setter
    def default_sender_address(self, default_sender_address: str):
        """
        Sets the default_sender_address of this User.
        The default sender address of a user

        :param default_sender_address: The default_sender_address of this User.
        :type default_sender_address: str
        """

        self._default_sender_address = default_sender_address

    @property
    def drive_user_folder_mode(self) -> str:
        """
        Gets the drive_user_folder_mode of this User.
        The drive user folder mode of a user

        :return: The drive_user_folder_mode of this User.
        :rtype: str
        """
        return self._drive_user_folder_mode

    @drive_user_folder_mode.setter
    def drive_user_folder_mode(self, drive_user_folder_mode: str):
        """
        Sets the drive_user_folder_mode of this User.
        The drive user folder mode of a user

        :param drive_user_folder_mode: The drive_user_folder_mode of this User.
        :type drive_user_folder_mode: str
        """

        self._drive_user_folder_mode = drive_user_folder_mode

    @property
    def default_group(self) -> object:
        """
        Gets the default_group of this User.
        The default group of a user

        :return: The default_group of this User.
        :rtype: object
        """
        return self._default_group

    @default_group.setter
    def default_group(self, default_group: object):
        """
        Sets the default_group of this User.
        The default group of a user

        :param default_group: The default_group of this User.
        :type default_group: object
        """

        self._default_group = default_group

    @property
    def department(self) -> str:
        """
        Gets the department of this User.
        The department of a user

        :return: The department of this User.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department: str):
        """
        Sets the department of this User.
        The department of a user

        :param department: The department of this User.
        :type department: str
        """

        self._department = department

    @property
    def display_name(self) -> str:
        """
        Gets the display_name of this User.
        The display name of a user (must be unique)

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """
        Sets the display_name of this User.
        The display name of a user (must be unique)

        :param display_name: The display_name of this User.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def email(self) -> str:
        """
        Gets the email of this User.
        The email of a user

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """
        Sets the email of this User.
        The email of a user

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def email1(self) -> str:
        """
        Gets the email1 of this User.
        The email1 of a user

        :return: The email1 of this User.
        :rtype: str
        """
        return self._email1

    @email1.setter
    def email1(self, email1: str):
        """
        Sets the email1 of this User.
        The email1 of a user

        :param email1: The email1 of this User.
        :type email1: str
        """
        if email1 is None:
            raise ValueError("Invalid value for `email1`, must not be `None`")

        self._email1 = email1

    @property
    def email2(self) -> str:
        """
        Gets the email2 of this User.
        The email2 of a user

        :return: The email2 of this User.
        :rtype: str
        """
        return self._email2

    @email2.setter
    def email2(self, email2: str):
        """
        Sets the email2 of this User.
        The email2 of a user

        :param email2: The email2 of this User.
        :type email2: str
        """

        self._email2 = email2

    @property
    def email3(self) -> str:
        """
        Gets the email3 of this User.
        The email3 of a user

        :return: The email3 of this User.
        :rtype: str
        """
        return self._email3

    @email3.setter
    def email3(self, email3: str):
        """
        Sets the email3 of this User.
        The email3 of a user

        :param email3: The email3 of this User.
        :type email3: str
        """

        self._email3 = email3

    @property
    def employee_type(self) -> str:
        """
        Gets the employee_type of this User.
        The employee type of a user

        :return: The employee_type of this User.
        :rtype: str
        """
        return self._employee_type

    @employee_type.setter
    def employee_type(self, employee_type: str):
        """
        Sets the employee_type of this User.
        The employee type of a user

        :param employee_type: The employee_type of this User.
        :type employee_type: str
        """

        self._employee_type = employee_type

    @property
    def fax_business(self) -> str:
        """
        Gets the fax_business of this User.
        The fax (business) of a user

        :return: The fax_business of this User.
        :rtype: str
        """
        return self._fax_business

    @fax_business.setter
    def fax_business(self, fax_business: str):
        """
        Sets the fax_business of this User.
        The fax (business) of a user

        :param fax_business: The fax_business of this User.
        :type fax_business: str
        """

        self._fax_business = fax_business

    @property
    def fax_home(self) -> str:
        """
        Gets the fax_home of this User.
        The fax (home) of a user

        :return: The fax_home of this User.
        :rtype: str
        """
        return self._fax_home

    @fax_home.setter
    def fax_home(self, fax_home: str):
        """
        Sets the fax_home of this User.
        The fax (home) of a user

        :param fax_home: The fax_home of this User.
        :type fax_home: str
        """

        self._fax_home = fax_home

    @property
    def fax_other(self) -> str:
        """
        Gets the fax_other of this User.
        Other fax of a user

        :return: The fax_other of this User.
        :rtype: str
        """
        return self._fax_other

    @fax_other.setter
    def fax_other(self, fax_other: str):
        """
        Sets the fax_other of this User.
        Other fax of a user

        :param fax_other: The fax_other of this User.
        :type fax_other: str
        """

        self._fax_other = fax_other

    @property
    def filestore_id(self) -> int:
        """
        Gets the filestore_id of this User.
        The filestore id of a user

        :return: The filestore_id of this User.
        :rtype: int
        """
        return self._filestore_id

    @filestore_id.setter
    def filestore_id(self, filestore_id: int):
        """
        Sets the filestore_id of this User.
        The filestore id of a user

        :param filestore_id: The filestore_id of this User.
        :type filestore_id: int
        """

        self._filestore_id = filestore_id

    @property
    def filestore_name(self) -> str:
        """
        Gets the filestore_name of this User.
        The filestore name of a user

        :return: The filestore_name of this User.
        :rtype: str
        """
        return self._filestore_name

    @filestore_name.setter
    def filestore_name(self, filestore_name: str):
        """
        Sets the filestore_name of this User.
        The filestore name of a user

        :param filestore_name: The filestore_name of this User.
        :type filestore_name: str
        """

        self._filestore_name = filestore_name

    @property
    def folder_tree(self) -> int:
        """
        Gets the folder_tree of this User.
        The folder tree of a user

        :return: The folder_tree of this User.
        :rtype: int
        """
        return self._folder_tree

    @folder_tree.setter
    def folder_tree(self, folder_tree: int):
        """
        Sets the folder_tree of this User.
        The folder tree of a user

        :param folder_tree: The folder_tree of this User.
        :type folder_tree: int
        """

        self._folder_tree = folder_tree

    @property
    def given_name(self) -> str:
        """
        Gets the given_name of this User.
        The given name of a user

        :return: The given_name of this User.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name: str):
        """
        Sets the given_name of this User.
        The given name of a user

        :param given_name: The given_name of this User.
        :type given_name: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")

        self._given_name = given_name

    @property
    def gui_preferences_for_soap(self) -> object:
        """
        Gets the gui_preferences_for_soap of this User.
        The gui preferences of a user

        :return: The gui_preferences_for_soap of this User.
        :rtype: object
        """
        return self._gui_preferences_for_soap

    @gui_preferences_for_soap.setter
    def gui_preferences_for_soap(self, gui_preferences_for_soap: object):
        """
        Sets the gui_preferences_for_soap of this User.
        The gui preferences of a user

        :param gui_preferences_for_soap: The gui_preferences_for_soap of this User.
        :type gui_preferences_for_soap: object
        """

        self._gui_preferences_for_soap = gui_preferences_for_soap

    @property
    def gui_spam_filter_enabled(self) -> bool:
        """
        Gets the gui_spam_filter_enabled of this User.
        Is the spam plugin in App Suite enabled for a user?

        :return: The gui_spam_filter_enabled of this User.
        :rtype: bool
        """
        return self._gui_spam_filter_enabled

    @gui_spam_filter_enabled.setter
    def gui_spam_filter_enabled(self, gui_spam_filter_enabled: bool):
        """
        Sets the gui_spam_filter_enabled of this User.
        Is the spam plugin in App Suite enabled for a user?

        :param gui_spam_filter_enabled: The gui_spam_filter_enabled of this User.
        :type gui_spam_filter_enabled: bool
        """

        self._gui_spam_filter_enabled = gui_spam_filter_enabled

    @property
    def id(self) -> int:
        """
        Gets the id of this User.
        The id of a user

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this User.
        The id of a user

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def imap_login(self) -> str:
        """
        Gets the imap_login of this User.
        The imap login information of a user

        :return: The imap_login of this User.
        :rtype: str
        """
        return self._imap_login

    @imap_login.setter
    def imap_login(self, imap_login: str):
        """
        Sets the imap_login of this User.
        The imap login information of a user

        :param imap_login: The imap_login of this User.
        :type imap_login: str
        """

        self._imap_login = imap_login

    @property
    def imap_port(self) -> int:
        """
        Gets the imap_port of this User.
        The imap port of a user

        :return: The imap_port of this User.
        :rtype: int
        """
        return self._imap_port

    @imap_port.setter
    def imap_port(self, imap_port: int):
        """
        Sets the imap_port of this User.
        The imap port of a user

        :param imap_port: The imap_port of this User.
        :type imap_port: int
        """

        self._imap_port = imap_port

    @property
    def imap_schema(self) -> str:
        """
        Gets the imap_schema of this User.
        The imap schema of a user

        :return: The imap_schema of this User.
        :rtype: str
        """
        return self._imap_schema

    @imap_schema.setter
    def imap_schema(self, imap_schema: str):
        """
        Sets the imap_schema of this User.
        The imap schema of a user

        :param imap_schema: The imap_schema of this User.
        :type imap_schema: str
        """

        self._imap_schema = imap_schema

    @property
    def imap_server(self) -> str:
        """
        Gets the imap_server of this User.
        The imap server of a user

        :return: The imap_server of this User.
        :rtype: str
        """
        return self._imap_server

    @imap_server.setter
    def imap_server(self, imap_server: str):
        """
        Sets the imap_server of this User.
        The imap server of a user

        :param imap_server: The imap_server of this User.
        :type imap_server: str
        """

        self._imap_server = imap_server

    @property
    def imap_server_string(self) -> str:
        """
        Gets the imap_server_string of this User.
        The imap server string of a user

        :return: The imap_server_string of this User.
        :rtype: str
        """
        return self._imap_server_string

    @imap_server_string.setter
    def imap_server_string(self, imap_server_string: str):
        """
        Sets the imap_server_string of this User.
        The imap server string of a user

        :param imap_server_string: The imap_server_string of this User.
        :type imap_server_string: str
        """

        self._imap_server_string = imap_server_string

    @property
    def info(self) -> str:
        """
        Gets the info of this User.
        The info of a user

        :return: The info of this User.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info: str):
        """
        Sets the info of this User.
        The info of a user

        :param info: The info of this User.
        :type info: str
        """

        self._info = info

    @property
    def instant_messenger1(self) -> str:
        """
        Gets the instant_messenger1 of this User.
        The instant messenger 1 of a user

        :return: The instant_messenger1 of this User.
        :rtype: str
        """
        return self._instant_messenger1

    @instant_messenger1.setter
    def instant_messenger1(self, instant_messenger1: str):
        """
        Sets the instant_messenger1 of this User.
        The instant messenger 1 of a user

        :param instant_messenger1: The instant_messenger1 of this User.
        :type instant_messenger1: str
        """

        self._instant_messenger1 = instant_messenger1

    @property
    def instant_messenger2(self) -> str:
        """
        Gets the instant_messenger2 of this User.
        The instant messenger 2 of a user

        :return: The instant_messenger2 of this User.
        :rtype: str
        """
        return self._instant_messenger2

    @instant_messenger2.setter
    def instant_messenger2(self, instant_messenger2: str):
        """
        Sets the instant_messenger2 of this User.
        The instant messenger 2 of a user

        :param instant_messenger2: The instant_messenger2 of this User.
        :type instant_messenger2: str
        """

        self._instant_messenger2 = instant_messenger2

    @property
    def language(self) -> str:
        """
        Gets the language of this User.
        The language of a user

        :return: The language of this User.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """
        Sets the language of this User.
        The language of a user

        :param language: The language of this User.
        :type language: str
        """

        self._language = language

    @property
    def mail_folder_confirmed_ham_name(self) -> str:
        """
        Gets the mail_folder_confirmed_ham_name of this User.
        The folder name for confirmed ham of a user

        :return: The mail_folder_confirmed_ham_name of this User.
        :rtype: str
        """
        return self._mail_folder_confirmed_ham_name

    @mail_folder_confirmed_ham_name.setter
    def mail_folder_confirmed_ham_name(self, mail_folder_confirmed_ham_name: str):
        """
        Sets the mail_folder_confirmed_ham_name of this User.
        The folder name for confirmed ham of a user

        :param mail_folder_confirmed_ham_name: The mail_folder_confirmed_ham_name of this User.
        :type mail_folder_confirmed_ham_name: str
        """

        self._mail_folder_confirmed_ham_name = mail_folder_confirmed_ham_name

    @property
    def mail_folder_confirmed_spam_name(self) -> str:
        """
        Gets the mail_folder_confirmed_spam_name of this User.
        The folder name for confirmed spam of a user

        :return: The mail_folder_confirmed_spam_name of this User.
        :rtype: str
        """
        return self._mail_folder_confirmed_spam_name

    @mail_folder_confirmed_spam_name.setter
    def mail_folder_confirmed_spam_name(self, mail_folder_confirmed_spam_name: str):
        """
        Sets the mail_folder_confirmed_spam_name of this User.
        The folder name for confirmed spam of a user

        :param mail_folder_confirmed_spam_name: The mail_folder_confirmed_spam_name of this User.
        :type mail_folder_confirmed_spam_name: str
        """

        self._mail_folder_confirmed_spam_name = mail_folder_confirmed_spam_name

    @property
    def mail_folder_drafts_name(self) -> str:
        """
        Gets the mail_folder_drafts_name of this User.
        The folder name for drafts of a user

        :return: The mail_folder_drafts_name of this User.
        :rtype: str
        """
        return self._mail_folder_drafts_name

    @mail_folder_drafts_name.setter
    def mail_folder_drafts_name(self, mail_folder_drafts_name: str):
        """
        Sets the mail_folder_drafts_name of this User.
        The folder name for drafts of a user

        :param mail_folder_drafts_name: The mail_folder_drafts_name of this User.
        :type mail_folder_drafts_name: str
        """

        self._mail_folder_drafts_name = mail_folder_drafts_name

    @property
    def mail_folder_sent_name(self) -> str:
        """
        Gets the mail_folder_sent_name of this User.
        The folder name for sent of a user

        :return: The mail_folder_sent_name of this User.
        :rtype: str
        """
        return self._mail_folder_sent_name

    @mail_folder_sent_name.setter
    def mail_folder_sent_name(self, mail_folder_sent_name: str):
        """
        Sets the mail_folder_sent_name of this User.
        The folder name for sent of a user

        :param mail_folder_sent_name: The mail_folder_sent_name of this User.
        :type mail_folder_sent_name: str
        """

        self._mail_folder_sent_name = mail_folder_sent_name

    @property
    def mail_folder_spam_name(self) -> str:
        """
        Gets the mail_folder_spam_name of this User.
        The folder name for spam of a user

        :return: The mail_folder_spam_name of this User.
        :rtype: str
        """
        return self._mail_folder_spam_name

    @mail_folder_spam_name.setter
    def mail_folder_spam_name(self, mail_folder_spam_name: str):
        """
        Sets the mail_folder_spam_name of this User.
        The folder name for spam of a user

        :param mail_folder_spam_name: The mail_folder_spam_name of this User.
        :type mail_folder_spam_name: str
        """

        self._mail_folder_spam_name = mail_folder_spam_name

    @property
    def mail_folder_trash_name(self) -> str:
        """
        Gets the mail_folder_trash_name of this User.
        The folder name for trash of a user

        :return: The mail_folder_trash_name of this User.
        :rtype: str
        """
        return self._mail_folder_trash_name

    @mail_folder_trash_name.setter
    def mail_folder_trash_name(self, mail_folder_trash_name: str):
        """
        Sets the mail_folder_trash_name of this User.
        The folder name for trash of a user

        :param mail_folder_trash_name: The mail_folder_trash_name of this User.
        :type mail_folder_trash_name: str
        """

        self._mail_folder_trash_name = mail_folder_trash_name

    @property
    def mailenabled(self) -> bool:
        """
        Gets the mailenabled of this User.
        The mailenabled flag of a user

        :return: The mailenabled of this User.
        :rtype: bool
        """
        return self._mailenabled

    @mailenabled.setter
    def mailenabled(self, mailenabled: bool):
        """
        Sets the mailenabled of this User.
        The mailenabled flag of a user

        :param mailenabled: The mailenabled of this User.
        :type mailenabled: bool
        """

        self._mailenabled = mailenabled

    @property
    def manager_name(self) -> str:
        """
        Gets the manager_name of this User.
        The manager name of a user

        :return: The manager_name of this User.
        :rtype: str
        """
        return self._manager_name

    @manager_name.setter
    def manager_name(self, manager_name: str):
        """
        Sets the manager_name of this User.
        The manager name of a user

        :param manager_name: The manager_name of this User.
        :type manager_name: str
        """

        self._manager_name = manager_name

    @property
    def marital_status(self) -> str:
        """
        Gets the marital_status of this User.
        The marital status of a user

        :return: The marital_status of this User.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status: str):
        """
        Sets the marital_status of this User.
        The marital status of a user

        :param marital_status: The marital_status of this User.
        :type marital_status: str
        """

        self._marital_status = marital_status

    @property
    def max_quota(self) -> int:
        """
        Gets the max_quota of this User.
        The maxQuota of a user

        :return: The max_quota of this User.
        :rtype: int
        """
        return self._max_quota

    @max_quota.setter
    def max_quota(self, max_quota: int):
        """
        Sets the max_quota of this User.
        The maxQuota of a user

        :param max_quota: The max_quota of this User.
        :type max_quota: int
        """

        self._max_quota = max_quota

    @property
    def middle_name(self) -> str:
        """
        Gets the middle_name of this User.
        The middle name of a user

        :return: The middle_name of this User.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name: str):
        """
        Sets the middle_name of this User.
        The middle name of a user

        :param middle_name: The middle_name of this User.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def name(self) -> str:
        """
        Gets the name of this User.
        The name of a user

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this User.
        The name of a user

        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nickname(self) -> str:
        """
        Gets the nickname of this User.
        The nickname of a user

        :return: The nickname of this User.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname: str):
        """
        Sets the nickname of this User.
        The nickname of a user

        :param nickname: The nickname of this User.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def note(self) -> str:
        """
        Gets the note of this User.
        The note of a user

        :return: The note of this User.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note: str):
        """
        Sets the note of this User.
        The note of a user

        :param note: The note of this User.
        :type note: str
        """

        self._note = note

    @property
    def number_of_children(self) -> str:
        """
        Gets the number_of_children of this User.
        The number of children of a user

        :return: The number_of_children of this User.
        :rtype: str
        """
        return self._number_of_children

    @number_of_children.setter
    def number_of_children(self, number_of_children: str):
        """
        Sets the number_of_children of this User.
        The number of children of a user

        :param number_of_children: The number_of_children of this User.
        :type number_of_children: str
        """

        self._number_of_children = number_of_children

    @property
    def number_of_employee(self) -> str:
        """
        Gets the number_of_employee of this User.
        The number of employee of a user

        :return: The number_of_employee of this User.
        :rtype: str
        """
        return self._number_of_employee

    @number_of_employee.setter
    def number_of_employee(self, number_of_employee: str):
        """
        Sets the number_of_employee of this User.
        The number of employee of a user

        :param number_of_employee: The number_of_employee of this User.
        :type number_of_employee: str
        """

        self._number_of_employee = number_of_employee

    @property
    def password(self) -> str:
        """
        Gets the password of this User.
        The password of a user

        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """
        Sets the password of this User.
        The password of a user

        :param password: The password of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def password_mech(self) -> str:
        """
        Gets the password_mech of this User.
        The password mechanism of a user

        :return: The password_mech of this User.
        :rtype: str
        """
        return self._password_mech

    @password_mech.setter
    def password_mech(self, password_mech: str):
        """
        Sets the password_mech of this User.
        The password mechanism of a user

        :param password_mech: The password_mech of this User.
        :type password_mech: str
        """

        self._password_mech = password_mech

    @property
    def password_expired(self) -> bool:
        """
        Gets the password_expired of this User.
        The password expired status of a user

        :return: The password_expired of this User.
        :rtype: bool
        """
        return self._password_expired

    @password_expired.setter
    def password_expired(self, password_expired: bool):
        """
        Sets the password_expired of this User.
        The password expired status of a user

        :param password_expired: The password_expired of this User.
        :type password_expired: bool
        """

        self._password_expired = password_expired

    @property
    def position(self) -> str:
        """
        Gets the position of this User.
        The position of a user

        :return: The position of this User.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position: str):
        """
        Sets the position of this User.
        The position of a user

        :param position: The position of this User.
        :type position: str
        """

        self._position = position

    @property
    def postal_code_business(self) -> str:
        """
        Gets the postal_code_business of this User.
        The postal code (business) of a user

        :return: The postal_code_business of this User.
        :rtype: str
        """
        return self._postal_code_business

    @postal_code_business.setter
    def postal_code_business(self, postal_code_business: str):
        """
        Sets the postal_code_business of this User.
        The postal code (business) of a user

        :param postal_code_business: The postal_code_business of this User.
        :type postal_code_business: str
        """

        self._postal_code_business = postal_code_business

    @property
    def postal_code_home(self) -> str:
        """
        Gets the postal_code_home of this User.
        The postal code (home) of a user

        :return: The postal_code_home of this User.
        :rtype: str
        """
        return self._postal_code_home

    @postal_code_home.setter
    def postal_code_home(self, postal_code_home: str):
        """
        Sets the postal_code_home of this User.
        The postal code (home) of a user

        :param postal_code_home: The postal_code_home of this User.
        :type postal_code_home: str
        """

        self._postal_code_home = postal_code_home

    @property
    def postal_code_other(self) -> str:
        """
        Gets the postal_code_other of this User.
        Other postal code of a user

        :return: The postal_code_other of this User.
        :rtype: str
        """
        return self._postal_code_other

    @postal_code_other.setter
    def postal_code_other(self, postal_code_other: str):
        """
        Sets the postal_code_other of this User.
        Other postal code of a user

        :param postal_code_other: The postal_code_other of this User.
        :type postal_code_other: str
        """

        self._postal_code_other = postal_code_other

    @property
    def primary_email(self) -> str:
        """
        Gets the primary_email of this User.
        The primary email of a user

        :return: The primary_email of this User.
        :rtype: str
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email: str):
        """
        Sets the primary_email of this User.
        The primary email of a user

        :param primary_email: The primary_email of this User.
        :type primary_email: str
        """
        if primary_email is None:
            raise ValueError("Invalid value for `primary_email`, must not be `None`")

        self._primary_email = primary_email

    @property
    def profession(self) -> str:
        """
        Gets the profession of this User.
        The profession of a user

        :return: The profession of this User.
        :rtype: str
        """
        return self._profession

    @profession.setter
    def profession(self, profession: str):
        """
        Sets the profession of this User.
        The profession of a user

        :param profession: The profession of this User.
        :type profession: str
        """

        self._profession = profession

    @property
    def room_number(self) -> str:
        """
        Gets the room_number of this User.
        The room number of a user

        :return: The room_number of this User.
        :rtype: str
        """
        return self._room_number

    @room_number.setter
    def room_number(self, room_number: str):
        """
        Sets the room_number of this User.
        The room number of a user

        :param room_number: The room_number of this User.
        :type room_number: str
        """

        self._room_number = room_number

    @property
    def sales_volume(self) -> str:
        """
        Gets the sales_volume of this User.
        The sales volume of a user

        :return: The sales_volume of this User.
        :rtype: str
        """
        return self._sales_volume

    @sales_volume.setter
    def sales_volume(self, sales_volume: str):
        """
        Sets the sales_volume of this User.
        The sales volume of a user

        :param sales_volume: The sales_volume of this User.
        :type sales_volume: str
        """

        self._sales_volume = sales_volume

    @property
    def smtp_port(self) -> int:
        """
        Gets the smtp_port of this User.
        The smtp port of a user

        :return: The smtp_port of this User.
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port: int):
        """
        Sets the smtp_port of this User.
        The smtp port of a user

        :param smtp_port: The smtp_port of this User.
        :type smtp_port: int
        """

        self._smtp_port = smtp_port

    @property
    def smtp_schema(self) -> str:
        """
        Gets the smtp_schema of this User.
        The smtp schema of a user

        :return: The smtp_schema of this User.
        :rtype: str
        """
        return self._smtp_schema

    @smtp_schema.setter
    def smtp_schema(self, smtp_schema: str):
        """
        Sets the smtp_schema of this User.
        The smtp schema of a user

        :param smtp_schema: The smtp_schema of this User.
        :type smtp_schema: str
        """

        self._smtp_schema = smtp_schema

    @property
    def smtp_server(self) -> str:
        """
        Gets the smtp_server of this User.
        The smtp server of a user

        :return: The smtp_server of this User.
        :rtype: str
        """
        return self._smtp_server

    @smtp_server.setter
    def smtp_server(self, smtp_server: str):
        """
        Sets the smtp_server of this User.
        The smtp server of a user

        :param smtp_server: The smtp_server of this User.
        :type smtp_server: str
        """

        self._smtp_server = smtp_server

    @property
    def smtp_server_string(self) -> str:
        """
        Gets the smtp_server_string of this User.
        The smtp server string of a user

        :return: The smtp_server_string of this User.
        :rtype: str
        """
        return self._smtp_server_string

    @smtp_server_string.setter
    def smtp_server_string(self, smtp_server_string: str):
        """
        Sets the smtp_server_string of this User.
        The smtp server string of a user

        :param smtp_server_string: The smtp_server_string of this User.
        :type smtp_server_string: str
        """

        self._smtp_server_string = smtp_server_string

    @property
    def spouse_name(self) -> str:
        """
        Gets the spouse_name of this User.
        The spouse name of a user

        :return: The spouse_name of this User.
        :rtype: str
        """
        return self._spouse_name

    @spouse_name.setter
    def spouse_name(self, spouse_name: str):
        """
        Sets the spouse_name of this User.
        The spouse name of a user

        :param spouse_name: The spouse_name of this User.
        :type spouse_name: str
        """

        self._spouse_name = spouse_name

    @property
    def state_business(self) -> str:
        """
        Gets the state_business of this User.
        The state (business) of a user

        :return: The state_business of this User.
        :rtype: str
        """
        return self._state_business

    @state_business.setter
    def state_business(self, state_business: str):
        """
        Sets the state_business of this User.
        The state (business) of a user

        :param state_business: The state_business of this User.
        :type state_business: str
        """

        self._state_business = state_business

    @property
    def state_home(self) -> str:
        """
        Gets the state_home of this User.
        The state (home) of a user

        :return: The state_home of this User.
        :rtype: str
        """
        return self._state_home

    @state_home.setter
    def state_home(self, state_home: str):
        """
        Sets the state_home of this User.
        The state (home) of a user

        :param state_home: The state_home of this User.
        :type state_home: str
        """

        self._state_home = state_home

    @property
    def state_other(self) -> str:
        """
        Gets the state_other of this User.
        Other state of a user

        :return: The state_other of this User.
        :rtype: str
        """
        return self._state_other

    @state_other.setter
    def state_other(self, state_other: str):
        """
        Sets the state_other of this User.
        Other state of a user

        :param state_other: The state_other of this User.
        :type state_other: str
        """

        self._state_other = state_other

    @property
    def street_business(self) -> str:
        """
        Gets the street_business of this User.
        The street (business) of a user

        :return: The street_business of this User.
        :rtype: str
        """
        return self._street_business

    @street_business.setter
    def street_business(self, street_business: str):
        """
        Sets the street_business of this User.
        The street (business) of a user

        :param street_business: The street_business of this User.
        :type street_business: str
        """

        self._street_business = street_business

    @property
    def street_home(self) -> str:
        """
        Gets the street_home of this User.
        The street (home) of a user

        :return: The street_home of this User.
        :rtype: str
        """
        return self._street_home

    @street_home.setter
    def street_home(self, street_home: str):
        """
        Sets the street_home of this User.
        The street (home) of a user

        :param street_home: The street_home of this User.
        :type street_home: str
        """

        self._street_home = street_home

    @property
    def street_other(self) -> str:
        """
        Gets the street_other of this User.
        Other street of a user

        :return: The street_other of this User.
        :rtype: str
        """
        return self._street_other

    @street_other.setter
    def street_other(self, street_other: str):
        """
        Sets the street_other of this User.
        Other street of a user

        :param street_other: The street_other of this User.
        :type street_other: str
        """

        self._street_other = street_other

    @property
    def suffix(self) -> str:
        """
        Gets the suffix of this User.
        The suffix of a user

        :return: The suffix of this User.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix: str):
        """
        Sets the suffix of this User.
        The suffix of a user

        :param suffix: The suffix of this User.
        :type suffix: str
        """

        self._suffix = suffix

    @property
    def sur_name(self) -> str:
        """
        Gets the sur_name of this User.
        The lastname of a user

        :return: The sur_name of this User.
        :rtype: str
        """
        return self._sur_name

    @sur_name.setter
    def sur_name(self, sur_name: str):
        """
        Sets the sur_name of this User.
        The lastname of a user

        :param sur_name: The sur_name of this User.
        :type sur_name: str
        """
        if sur_name is None:
            raise ValueError("Invalid value for `sur_name`, must not be `None`")

        self._sur_name = sur_name

    @property
    def tax_id(self) -> str:
        """
        Gets the tax_id of this User.
        The tax id of a user

        :return: The tax_id of this User.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id: str):
        """
        Sets the tax_id of this User.
        The tax id of a user

        :param tax_id: The tax_id of this User.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def telephone_assistant(self) -> str:
        """
        Gets the telephone_assistant of this User.
        The telephone assistant of a user

        :return: The telephone_assistant of this User.
        :rtype: str
        """
        return self._telephone_assistant

    @telephone_assistant.setter
    def telephone_assistant(self, telephone_assistant: str):
        """
        Sets the telephone_assistant of this User.
        The telephone assistant of a user

        :param telephone_assistant: The telephone_assistant of this User.
        :type telephone_assistant: str
        """

        self._telephone_assistant = telephone_assistant

    @property
    def telephone_business1(self) -> str:
        """
        Gets the telephone_business1 of this User.
        The telephone business 1 of a user

        :return: The telephone_business1 of this User.
        :rtype: str
        """
        return self._telephone_business1

    @telephone_business1.setter
    def telephone_business1(self, telephone_business1: str):
        """
        Sets the telephone_business1 of this User.
        The telephone business 1 of a user

        :param telephone_business1: The telephone_business1 of this User.
        :type telephone_business1: str
        """

        self._telephone_business1 = telephone_business1

    @property
    def telephone_business2(self) -> str:
        """
        Gets the telephone_business2 of this User.
        The telephone business 2 of a user

        :return: The telephone_business2 of this User.
        :rtype: str
        """
        return self._telephone_business2

    @telephone_business2.setter
    def telephone_business2(self, telephone_business2: str):
        """
        Sets the telephone_business2 of this User.
        The telephone business 2 of a user

        :param telephone_business2: The telephone_business2 of this User.
        :type telephone_business2: str
        """

        self._telephone_business2 = telephone_business2

    @property
    def telephone_callback(self) -> str:
        """
        Gets the telephone_callback of this User.
        The telephone callback of a user

        :return: The telephone_callback of this User.
        :rtype: str
        """
        return self._telephone_callback

    @telephone_callback.setter
    def telephone_callback(self, telephone_callback: str):
        """
        Sets the telephone_callback of this User.
        The telephone callback of a user

        :param telephone_callback: The telephone_callback of this User.
        :type telephone_callback: str
        """

        self._telephone_callback = telephone_callback

    @property
    def telephone_car(self) -> str:
        """
        Gets the telephone_car of this User.
        The telephone car of a user

        :return: The telephone_car of this User.
        :rtype: str
        """
        return self._telephone_car

    @telephone_car.setter
    def telephone_car(self, telephone_car: str):
        """
        Sets the telephone_car of this User.
        The telephone car of a user

        :param telephone_car: The telephone_car of this User.
        :type telephone_car: str
        """

        self._telephone_car = telephone_car

    @property
    def telephone_company(self) -> str:
        """
        Gets the telephone_company of this User.
        The telephone (company) of a user

        :return: The telephone_company of this User.
        :rtype: str
        """
        return self._telephone_company

    @telephone_company.setter
    def telephone_company(self, telephone_company: str):
        """
        Sets the telephone_company of this User.
        The telephone (company) of a user

        :param telephone_company: The telephone_company of this User.
        :type telephone_company: str
        """

        self._telephone_company = telephone_company

    @property
    def telephone_home1(self) -> str:
        """
        Gets the telephone_home1 of this User.
        The telephone (home 1) of a user

        :return: The telephone_home1 of this User.
        :rtype: str
        """
        return self._telephone_home1

    @telephone_home1.setter
    def telephone_home1(self, telephone_home1: str):
        """
        Sets the telephone_home1 of this User.
        The telephone (home 1) of a user

        :param telephone_home1: The telephone_home1 of this User.
        :type telephone_home1: str
        """

        self._telephone_home1 = telephone_home1

    @property
    def telephone_home2(self) -> str:
        """
        Gets the telephone_home2 of this User.
        The telephone (home 2) of a user

        :return: The telephone_home2 of this User.
        :rtype: str
        """
        return self._telephone_home2

    @telephone_home2.setter
    def telephone_home2(self, telephone_home2: str):
        """
        Sets the telephone_home2 of this User.
        The telephone (home 2) of a user

        :param telephone_home2: The telephone_home2 of this User.
        :type telephone_home2: str
        """

        self._telephone_home2 = telephone_home2

    @property
    def telephone_ip(self) -> str:
        """
        Gets the telephone_ip of this User.
        The telephone (ip) of a user

        :return: The telephone_ip of this User.
        :rtype: str
        """
        return self._telephone_ip

    @telephone_ip.setter
    def telephone_ip(self, telephone_ip: str):
        """
        Sets the telephone_ip of this User.
        The telephone (ip) of a user

        :param telephone_ip: The telephone_ip of this User.
        :type telephone_ip: str
        """

        self._telephone_ip = telephone_ip

    @property
    def telephone_isdn(self) -> str:
        """
        Gets the telephone_isdn of this User.
        The telephone (isdn) of a user

        :return: The telephone_isdn of this User.
        :rtype: str
        """
        return self._telephone_isdn

    @telephone_isdn.setter
    def telephone_isdn(self, telephone_isdn: str):
        """
        Sets the telephone_isdn of this User.
        The telephone (isdn) of a user

        :param telephone_isdn: The telephone_isdn of this User.
        :type telephone_isdn: str
        """

        self._telephone_isdn = telephone_isdn

    @property
    def telephone_other(self) -> str:
        """
        Gets the telephone_other of this User.
        Other telephone of a user

        :return: The telephone_other of this User.
        :rtype: str
        """
        return self._telephone_other

    @telephone_other.setter
    def telephone_other(self, telephone_other: str):
        """
        Sets the telephone_other of this User.
        Other telephone of a user

        :param telephone_other: The telephone_other of this User.
        :type telephone_other: str
        """

        self._telephone_other = telephone_other

    @property
    def telephone_pager(self) -> str:
        """
        Gets the telephone_pager of this User.
        The telephone pager of a user

        :return: The telephone_pager of this User.
        :rtype: str
        """
        return self._telephone_pager

    @telephone_pager.setter
    def telephone_pager(self, telephone_pager: str):
        """
        Sets the telephone_pager of this User.
        The telephone pager of a user

        :param telephone_pager: The telephone_pager of this User.
        :type telephone_pager: str
        """

        self._telephone_pager = telephone_pager

    @property
    def telephone_primary(self) -> str:
        """
        Gets the telephone_primary of this User.
        The primary telephone of a user

        :return: The telephone_primary of this User.
        :rtype: str
        """
        return self._telephone_primary

    @telephone_primary.setter
    def telephone_primary(self, telephone_primary: str):
        """
        Sets the telephone_primary of this User.
        The primary telephone of a user

        :param telephone_primary: The telephone_primary of this User.
        :type telephone_primary: str
        """

        self._telephone_primary = telephone_primary

    @property
    def telephone_radio(self) -> str:
        """
        Gets the telephone_radio of this User.
        The telephone (radio) of a user

        :return: The telephone_radio of this User.
        :rtype: str
        """
        return self._telephone_radio

    @telephone_radio.setter
    def telephone_radio(self, telephone_radio: str):
        """
        Sets the telephone_radio of this User.
        The telephone (radio) of a user

        :param telephone_radio: The telephone_radio of this User.
        :type telephone_radio: str
        """

        self._telephone_radio = telephone_radio

    @property
    def telephone_telex(self) -> str:
        """
        Gets the telephone_telex of this User.
        The telephone (telex) of a user

        :return: The telephone_telex of this User.
        :rtype: str
        """
        return self._telephone_telex

    @telephone_telex.setter
    def telephone_telex(self, telephone_telex: str):
        """
        Sets the telephone_telex of this User.
        The telephone (telex) of a user

        :param telephone_telex: The telephone_telex of this User.
        :type telephone_telex: str
        """

        self._telephone_telex = telephone_telex

    @property
    def telephone_ttytdd(self) -> str:
        """
        Gets the telephone_ttytdd of this User.
        The telephone (ttytdd) of a user

        :return: The telephone_ttytdd of this User.
        :rtype: str
        """
        return self._telephone_ttytdd

    @telephone_ttytdd.setter
    def telephone_ttytdd(self, telephone_ttytdd: str):
        """
        Sets the telephone_ttytdd of this User.
        The telephone (ttytdd) of a user

        :param telephone_ttytdd: The telephone_ttytdd of this User.
        :type telephone_ttytdd: str
        """

        self._telephone_ttytdd = telephone_ttytdd

    @property
    def timezone(self) -> str:
        """
        Gets the timezone of this User.
        The timezone of a user

        :return: The timezone of this User.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: str):
        """
        Sets the timezone of this User.
        The timezone of a user

        :param timezone: The timezone of this User.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def title(self) -> str:
        """
        Gets the title of this User.
        The title of a user

        :return: The title of this User.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """
        Sets the title of this User.
        The title of a user

        :param title: The title of this User.
        :type title: str
        """

        self._title = title

    @property
    def upload_file_size_limit(self) -> int:
        """
        Gets the upload_file_size_limit of this User.
        The uploadFileSizeLimit of a user

        :return: The upload_file_size_limit of this User.
        :rtype: int
        """
        return self._upload_file_size_limit

    @upload_file_size_limit.setter
    def upload_file_size_limit(self, upload_file_size_limit: int):
        """
        Sets the upload_file_size_limit of this User.
        The uploadFileSizeLimit of a user

        :param upload_file_size_limit: The upload_file_size_limit of this User.
        :type upload_file_size_limit: int
        """

        self._upload_file_size_limit = upload_file_size_limit

    @property
    def upload_file_size_limit_per_file(self) -> int:
        """
        Gets the upload_file_size_limit_per_file of this User.
        The uploadFileSizeLimitPerFile of a user

        :return: The upload_file_size_limit_per_file of this User.
        :rtype: int
        """
        return self._upload_file_size_limit_per_file

    @upload_file_size_limit_per_file.setter
    def upload_file_size_limit_per_file(self, upload_file_size_limit_per_file: int):
        """
        Sets the upload_file_size_limit_per_file of this User.
        The uploadFileSizeLimitPerFile of a user

        :param upload_file_size_limit_per_file: The upload_file_size_limit_per_file of this User.
        :type upload_file_size_limit_per_file: int
        """

        self._upload_file_size_limit_per_file = upload_file_size_limit_per_file

    @property
    def url(self) -> str:
        """
        Gets the url of this User.
        The url of a user

        :return: The url of this User.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """
        Sets the url of this User.
        The url of a user

        :param url: The url of this User.
        :type url: str
        """

        self._url = url

    @property
    def used_quota(self) -> int:
        """
        Gets the used_quota of this User.
        The usedQuota of a user

        :return: The used_quota of this User.
        :rtype: int
        """
        return self._used_quota

    @used_quota.setter
    def used_quota(self, used_quota: int):
        """
        Sets the used_quota of this User.
        The usedQuota of a user

        :param used_quota: The used_quota of this User.
        :type used_quota: int
        """

        self._used_quota = used_quota

    @property
    def user_attributes(self) -> object:
        """
        Gets the user_attributes of this User.
        The attributes of a user

        :return: The user_attributes of this User.
        :rtype: object
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes: object):
        """
        Sets the user_attributes of this User.
        The attributes of a user

        :param user_attributes: The user_attributes of this User.
        :type user_attributes: object
        """

        self._user_attributes = user_attributes

    @property
    def userfield01(self) -> str:
        """
        Gets the userfield01 of this User.
        The userfield01 of a user

        :return: The userfield01 of this User.
        :rtype: str
        """
        return self._userfield01

    @userfield01.setter
    def userfield01(self, userfield01: str):
        """
        Sets the userfield01 of this User.
        The userfield01 of a user

        :param userfield01: The userfield01 of this User.
        :type userfield01: str
        """

        self._userfield01 = userfield01

    @property
    def userfield02(self) -> str:
        """
        Gets the userfield02 of this User.
        The userfield02 of a user

        :return: The userfield02 of this User.
        :rtype: str
        """
        return self._userfield02

    @userfield02.setter
    def userfield02(self, userfield02: str):
        """
        Sets the userfield02 of this User.
        The userfield02 of a user

        :param userfield02: The userfield02 of this User.
        :type userfield02: str
        """

        self._userfield02 = userfield02

    @property
    def userfield03(self) -> str:
        """
        Gets the userfield03 of this User.
        The userfield03 of a user

        :return: The userfield03 of this User.
        :rtype: str
        """
        return self._userfield03

    @userfield03.setter
    def userfield03(self, userfield03: str):
        """
        Sets the userfield03 of this User.
        The userfield03 of a user

        :param userfield03: The userfield03 of this User.
        :type userfield03: str
        """

        self._userfield03 = userfield03

    @property
    def userfield04(self) -> str:
        """
        Gets the userfield04 of this User.
        The userfield04 of a user

        :return: The userfield04 of this User.
        :rtype: str
        """
        return self._userfield04

    @userfield04.setter
    def userfield04(self, userfield04: str):
        """
        Sets the userfield04 of this User.
        The userfield04 of a user

        :param userfield04: The userfield04 of this User.
        :type userfield04: str
        """

        self._userfield04 = userfield04

    @property
    def userfield05(self) -> str:
        """
        Gets the userfield05 of this User.
        The userfield05 of a user

        :return: The userfield05 of this User.
        :rtype: str
        """
        return self._userfield05

    @userfield05.setter
    def userfield05(self, userfield05: str):
        """
        Sets the userfield05 of this User.
        The userfield05 of a user

        :param userfield05: The userfield05 of this User.
        :type userfield05: str
        """

        self._userfield05 = userfield05

    @property
    def userfield06(self) -> str:
        """
        Gets the userfield06 of this User.
        The userfield06 of a user

        :return: The userfield06 of this User.
        :rtype: str
        """
        return self._userfield06

    @userfield06.setter
    def userfield06(self, userfield06: str):
        """
        Sets the userfield06 of this User.
        The userfield06 of a user

        :param userfield06: The userfield06 of this User.
        :type userfield06: str
        """

        self._userfield06 = userfield06

    @property
    def userfield07(self) -> str:
        """
        Gets the userfield07 of this User.
        The userfield07 of a user

        :return: The userfield07 of this User.
        :rtype: str
        """
        return self._userfield07

    @userfield07.setter
    def userfield07(self, userfield07: str):
        """
        Sets the userfield07 of this User.
        The userfield07 of a user

        :param userfield07: The userfield07 of this User.
        :type userfield07: str
        """

        self._userfield07 = userfield07

    @property
    def userfield08(self) -> str:
        """
        Gets the userfield08 of this User.
        The userfield08 of a user

        :return: The userfield08 of this User.
        :rtype: str
        """
        return self._userfield08

    @userfield08.setter
    def userfield08(self, userfield08: str):
        """
        Sets the userfield08 of this User.
        The userfield08 of a user

        :param userfield08: The userfield08 of this User.
        :type userfield08: str
        """

        self._userfield08 = userfield08

    @property
    def userfield09(self) -> str:
        """
        Gets the userfield09 of this User.
        The userfield09 of a user

        :return: The userfield09 of this User.
        :rtype: str
        """
        return self._userfield09

    @userfield09.setter
    def userfield09(self, userfield09: str):
        """
        Sets the userfield09 of this User.
        The userfield09 of a user

        :param userfield09: The userfield09 of this User.
        :type userfield09: str
        """

        self._userfield09 = userfield09

    @property
    def userfield10(self) -> str:
        """
        Gets the userfield10 of this User.
        The userfield10 of a user

        :return: The userfield10 of this User.
        :rtype: str
        """
        return self._userfield10

    @userfield10.setter
    def userfield10(self, userfield10: str):
        """
        Sets the userfield10 of this User.
        The userfield10 of a user

        :param userfield10: The userfield10 of this User.
        :type userfield10: str
        """

        self._userfield10 = userfield10

    @property
    def userfield11(self) -> str:
        """
        Gets the userfield11 of this User.
        The userfield11 of a user

        :return: The userfield11 of this User.
        :rtype: str
        """
        return self._userfield11

    @userfield11.setter
    def userfield11(self, userfield11: str):
        """
        Sets the userfield11 of this User.
        The userfield11 of a user

        :param userfield11: The userfield11 of this User.
        :type userfield11: str
        """

        self._userfield11 = userfield11

    @property
    def userfield12(self) -> str:
        """
        Gets the userfield12 of this User.
        The userfield12 of a user

        :return: The userfield12 of this User.
        :rtype: str
        """
        return self._userfield12

    @userfield12.setter
    def userfield12(self, userfield12: str):
        """
        Sets the userfield12 of this User.
        The userfield12 of a user

        :param userfield12: The userfield12 of this User.
        :type userfield12: str
        """

        self._userfield12 = userfield12

    @property
    def userfield13(self) -> str:
        """
        Gets the userfield13 of this User.
        The userfield13 of a user

        :return: The userfield13 of this User.
        :rtype: str
        """
        return self._userfield13

    @userfield13.setter
    def userfield13(self, userfield13: str):
        """
        Sets the userfield13 of this User.
        The userfield13 of a user

        :param userfield13: The userfield13 of this User.
        :type userfield13: str
        """

        self._userfield13 = userfield13

    @property
    def userfield14(self) -> str:
        """
        Gets the userfield14 of this User.
        The userfield14 of a user

        :return: The userfield14 of this User.
        :rtype: str
        """
        return self._userfield14

    @userfield14.setter
    def userfield14(self, userfield14: str):
        """
        Sets the userfield14 of this User.
        The userfield14 of a user

        :param userfield14: The userfield14 of this User.
        :type userfield14: str
        """

        self._userfield14 = userfield14

    @property
    def userfield15(self) -> str:
        """
        Gets the userfield15 of this User.
        The userfield15 of a user

        :return: The userfield15 of this User.
        :rtype: str
        """
        return self._userfield15

    @userfield15.setter
    def userfield15(self, userfield15: str):
        """
        Sets the userfield15 of this User.
        The userfield15 of a user

        :param userfield15: The userfield15 of this User.
        :type userfield15: str
        """

        self._userfield15 = userfield15

    @property
    def userfield16(self) -> str:
        """
        Gets the userfield16 of this User.
        The userfield16 of a user

        :return: The userfield16 of this User.
        :rtype: str
        """
        return self._userfield16

    @userfield16.setter
    def userfield16(self, userfield16: str):
        """
        Sets the userfield16 of this User.
        The userfield16 of a user

        :param userfield16: The userfield16 of this User.
        :type userfield16: str
        """

        self._userfield16 = userfield16

    @property
    def userfield17(self) -> str:
        """
        Gets the userfield17 of this User.
        The userfield17 of a user

        :return: The userfield17 of this User.
        :rtype: str
        """
        return self._userfield17

    @userfield17.setter
    def userfield17(self, userfield17: str):
        """
        Sets the userfield17 of this User.
        The userfield17 of a user

        :param userfield17: The userfield17 of this User.
        :type userfield17: str
        """

        self._userfield17 = userfield17

    @property
    def userfield18(self) -> str:
        """
        Gets the userfield18 of this User.
        The userfield18 of a user

        :return: The userfield18 of this User.
        :rtype: str
        """
        return self._userfield18

    @userfield18.setter
    def userfield18(self, userfield18: str):
        """
        Sets the userfield18 of this User.
        The userfield18 of a user

        :param userfield18: The userfield18 of this User.
        :type userfield18: str
        """

        self._userfield18 = userfield18

    @property
    def userfield19(self) -> str:
        """
        Gets the userfield19 of this User.
        The userfield19 of a user

        :return: The userfield19 of this User.
        :rtype: str
        """
        return self._userfield19

    @userfield19.setter
    def userfield19(self, userfield19: str):
        """
        Sets the userfield19 of this User.
        The userfield19 of a user

        :param userfield19: The userfield19 of this User.
        :type userfield19: str
        """

        self._userfield19 = userfield19

    @property
    def userfield20(self) -> str:
        """
        Gets the userfield20 of this User.
        The userfield20 of a user

        :return: The userfield20 of this User.
        :rtype: str
        """
        return self._userfield20

    @userfield20.setter
    def userfield20(self, userfield20: str):
        """
        Sets the userfield20 of this User.
        The userfield20 of a user

        :param userfield20: The userfield20 of this User.
        :type userfield20: str
        """

        self._userfield20 = userfield20

    @property
    def primary_account_name(self) -> str:
        """
        Gets the primary_account_name of this User.
        The primaryAccountName of a user

        :return: The primary_account_name of this User.
        :rtype: str
        """
        return self._primary_account_name

    @primary_account_name.setter
    def primary_account_name(self, primary_account_name: str):
        """
        Sets the primary_account_name of this User.
        The primaryAccountName of a user

        :param primary_account_name: The primary_account_name of this User.
        :type primary_account_name: str
        """

        self._primary_account_name = primary_account_name

    @property
    def convert_drive_user_folders(self) -> bool:
        """
        Gets the convert_drive_user_folders of this User.
        The convert_drive_user_folders flag of a user

        :return: The convert_drive_user_folders of this User.
        :rtype: bool
        """
        return self._convert_drive_user_folders

    @convert_drive_user_folders.setter
    def convert_drive_user_folders(self, convert_drive_user_folders: bool):
        """
        Sets the convert_drive_user_folders of this User.
        The convert_drive_user_folders flag of a user

        :param convert_drive_user_folders: The convert_drive_user_folders of this User.
        :type convert_drive_user_folders: bool
        """

        self._convert_drive_user_folders = convert_drive_user_folders

