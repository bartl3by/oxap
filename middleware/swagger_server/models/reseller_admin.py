# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.restriction import Restriction  # noqa: F401,E501
from swagger_server import util


class ResellerAdmin(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, password_mech: str=None, password: str=None, parent_id: int=None, restrictions: List[Restriction]=None, displayname: str=None, id: int=None):
        """ResellerAdmin - a model defined in Swagger

        :param name: The name of this ResellerAdmin.
        :type name: str
        :param password_mech: The password_mech of this ResellerAdmin.
        :type password_mech: str
        :param password: The password of this ResellerAdmin.
        :type password: str
        :param parent_id: The parent_id of this ResellerAdmin.
        :type parent_id: int
        :param restrictions: The restrictions of this ResellerAdmin.
        :type restrictions: List[Restriction]
        :param displayname: The displayname of this ResellerAdmin.
        :type displayname: str
        :param id: The id of this ResellerAdmin.
        :type id: int
        """
        self.swagger_types = {
            'name': str,
            'password_mech': str,
            'password': str,
            'parent_id': int,
            'restrictions': List[Restriction],
            'displayname': str,
            'id': int
        }

        self.attribute_map = {
            'name': 'name',
            'password_mech': 'passwordMech',
            'password': 'password',
            'parent_id': 'parentId',
            'restrictions': 'restrictions',
            'displayname': 'displayname',
            'id': 'id'
        }

        self._name = name
        self._password_mech = password_mech
        self._password = password
        self._parent_id = parent_id
        self._restrictions = restrictions
        self._displayname = displayname
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'ResellerAdmin':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResellerAdmin of this ResellerAdmin.
        :rtype: ResellerAdmin
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ResellerAdmin.


        :return: The name of this ResellerAdmin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ResellerAdmin.


        :param name: The name of this ResellerAdmin.
        :type name: str
        """

        self._name = name

    @property
    def password_mech(self) -> str:
        """Gets the password_mech of this ResellerAdmin.


        :return: The password_mech of this ResellerAdmin.
        :rtype: str
        """
        return self._password_mech

    @password_mech.setter
    def password_mech(self, password_mech: str):
        """Sets the password_mech of this ResellerAdmin.


        :param password_mech: The password_mech of this ResellerAdmin.
        :type password_mech: str
        """

        self._password_mech = password_mech

    @property
    def password(self) -> str:
        """Gets the password of this ResellerAdmin.


        :return: The password of this ResellerAdmin.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this ResellerAdmin.


        :param password: The password of this ResellerAdmin.
        :type password: str
        """

        self._password = password

    @property
    def parent_id(self) -> int:
        """Gets the parent_id of this ResellerAdmin.


        :return: The parent_id of this ResellerAdmin.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id: int):
        """Sets the parent_id of this ResellerAdmin.


        :param parent_id: The parent_id of this ResellerAdmin.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def restrictions(self) -> List[Restriction]:
        """Gets the restrictions of this ResellerAdmin.


        :return: The restrictions of this ResellerAdmin.
        :rtype: List[Restriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions: List[Restriction]):
        """Sets the restrictions of this ResellerAdmin.


        :param restrictions: The restrictions of this ResellerAdmin.
        :type restrictions: List[Restriction]
        """

        self._restrictions = restrictions

    @property
    def displayname(self) -> str:
        """Gets the displayname of this ResellerAdmin.


        :return: The displayname of this ResellerAdmin.
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname: str):
        """Sets the displayname of this ResellerAdmin.


        :param displayname: The displayname of this ResellerAdmin.
        :type displayname: str
        """

        self._displayname = displayname

    @property
    def id(self) -> int:
        """Gets the id of this ResellerAdmin.


        :return: The id of this ResellerAdmin.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ResellerAdmin.


        :param id: The id of this ResellerAdmin.
        :type id: int
        """

        self._id = id
