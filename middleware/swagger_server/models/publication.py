# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Publication(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id: int=None, id: str=None, entity_id: str=None, module: str=None, name: str=None, description: str=None):
        """
        Publication - a model defined in Swagger

        :param user_id: The user_id of this Publication.
        :type user_id: int
        :param id: The id of this Publication.
        :type id: str
        :param entity_id: The entity_id of this Publication.
        :type entity_id: str
        :param module: The module of this Publication.
        :type module: str
        :param name: The name of this Publication.
        :type name: str
        :param description: The description of this Publication.
        :type description: str
        """
        self.swagger_types = {
            'user_id': int,
            'id': str,
            'entity_id': str,
            'module': str,
            'name': str,
            'description': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'id': 'id',
            'entity_id': 'entityId',
            'module': 'module',
            'name': 'name',
            'description': 'description'
        }

        self._user_id = user_id
        self._id = id
        self._entity_id = entity_id
        self._module = module
        self._name = name
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Publication':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Publication of this Publication.
        :rtype: Publication
        """
        return deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """
        Gets the user_id of this Publication.
        

        :return: The user_id of this Publication.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """
        Sets the user_id of this Publication.
        

        :param user_id: The user_id of this Publication.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def id(self) -> str:
        """
        Gets the id of this Publication.
        

        :return: The id of this Publication.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Publication.
        

        :param id: The id of this Publication.
        :type id: str
        """

        self._id = id

    @property
    def entity_id(self) -> str:
        """
        Gets the entity_id of this Publication.
        

        :return: The entity_id of this Publication.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id: str):
        """
        Sets the entity_id of this Publication.
        

        :param entity_id: The entity_id of this Publication.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def module(self) -> str:
        """
        Gets the module of this Publication.
        

        :return: The module of this Publication.
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module: str):
        """
        Sets the module of this Publication.
        

        :param module: The module of this Publication.
        :type module: str
        """

        self._module = module

    @property
    def name(self) -> str:
        """
        Gets the name of this Publication.
        

        :return: The name of this Publication.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Publication.
        

        :param name: The name of this Publication.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """
        Gets the description of this Publication.
        

        :return: The description of this Publication.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Publication.
        

        :param description: The description of this Publication.
        :type description: str
        """

        self._description = description

