# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Resource(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, description: str=None, displayname: str=None, email: str=None, name: str=None):
        """
        Resource - a model defined in Swagger

        :param id: The id of this Resource.
        :type id: int
        :param description: The description of this Resource.
        :type description: str
        :param displayname: The displayname of this Resource.
        :type displayname: str
        :param email: The email of this Resource.
        :type email: str
        :param name: The name of this Resource.
        :type name: str
        """
        self.swagger_types = {
            'id': int,
            'description': str,
            'displayname': str,
            'email': str,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'displayname': 'displayname',
            'email': 'email',
            'name': 'name'
        }

        self._id = id
        self._description = description
        self._displayname = displayname
        self._email = email
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Resource':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Resource of this Resource.
        :rtype: Resource
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Resource.
        The id of this object

        :return: The id of this Resource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Resource.
        The id of this object

        :param id: The id of this Resource.
        :type id: int
        """

        self._id = id

    @property
    def description(self) -> str:
        """
        Gets the description of this Resource.
        The description of this resource

        :return: The description of this Resource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this Resource.
        The description of this resource

        :param description: The description of this Resource.
        :type description: str
        """

        self._description = description

    @property
    def displayname(self) -> str:
        """
        Gets the displayname of this Resource.
        The displayname of this resource

        :return: The displayname of this Resource.
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname: str):
        """
        Sets the displayname of this Resource.
        The displayname of this resource

        :param displayname: The displayname of this Resource.
        :type displayname: str
        """
        if displayname is None:
            raise ValueError("Invalid value for `displayname`, must not be `None`")

        self._displayname = displayname

    @property
    def email(self) -> str:
        """
        Gets the email of this Resource.
        The E-Mail of this resource

        :return: The email of this Resource.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """
        Sets the email of this Resource.
        The E-Mail of this resource

        :param email: The email of this Resource.
        :type email: str
        """

        self._email = email

    @property
    def name(self) -> str:
        """
        Gets the name of this Resource.
        The name of this object

        :return: The name of this Resource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Resource.
        The name of this object

        :param name: The name of this Resource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

