# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.context import Context
from swagger_server.models.user import User
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Payload(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, context: Context=None, user: User=None):
        """
        Payload - a model defined in Swagger

        :param context: The context of this Payload.
        :type context: Context
        :param user: The user of this Payload.
        :type user: User
        """
        self.swagger_types = {
            'context': Context,
            'user': User
        }

        self.attribute_map = {
            'context': 'context',
            'user': 'user'
        }

        self._context = context
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'Payload':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The payload of this Payload.
        :rtype: Payload
        """
        return deserialize_model(dikt, cls)

    @property
    def context(self) -> Context:
        """
        Gets the context of this Payload.
        The context information

        :return: The context of this Payload.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context: Context):
        """
        Sets the context of this Payload.
        The context information

        :param context: The context of this Payload.
        :type context: Context
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def user(self) -> User:
        """
        Gets the user of this Payload.
        The admin user information of a context

        :return: The user of this Payload.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """
        Sets the user of this Payload.
        The admin user information of a context

        :param user: The user of this Payload.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

