# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Session(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, creation_date: str=None, expiration_date: str=None, account_id: str=None, endpoint_id: str=None, role: str=None):
        """Session - a model defined in Swagger

        :param id: The id of this Session.
        :type id: str
        :param creation_date: The creation_date of this Session.
        :type creation_date: str
        :param expiration_date: The expiration_date of this Session.
        :type expiration_date: str
        :param account_id: The account_id of this Session.
        :type account_id: str
        :param endpoint_id: The endpoint_id of this Session.
        :type endpoint_id: str
        :param role: The role of this Session.
        :type role: str
        """
        self.swagger_types = {
            'id': str,
            'creation_date': str,
            'expiration_date': str,
            'account_id': str,
            'endpoint_id': str,
            'role': str
        }

        self.attribute_map = {
            'id': 'id',
            'creation_date': 'creation_date',
            'expiration_date': 'expiration_date',
            'account_id': 'account_id',
            'endpoint_id': 'endpoint_id',
            'role': 'role'
        }

        self._id = id
        self._creation_date = creation_date
        self._expiration_date = expiration_date
        self._account_id = account_id
        self._endpoint_id = endpoint_id
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Session of this Session.
        :rtype: Session
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Session.

        The OXAP Session ID generated by the OXAP middleware

        :return: The id of this Session.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Session.

        The OXAP Session ID generated by the OXAP middleware

        :param id: The id of this Session.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def creation_date(self) -> str:
        """Gets the creation_date of this Session.


        :return: The creation_date of this Session.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: str):
        """Sets the creation_date of this Session.


        :param creation_date: The creation_date of this Session.
        :type creation_date: str
        """

        self._creation_date = creation_date

    @property
    def expiration_date(self) -> str:
        """Gets the expiration_date of this Session.


        :return: The expiration_date of this Session.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date: str):
        """Sets the expiration_date of this Session.


        :param expiration_date: The expiration_date of this Session.
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def account_id(self) -> str:
        """Gets the account_id of this Session.

        Id of the OXAP account

        :return: The account_id of this Session.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this Session.

        Id of the OXAP account

        :param account_id: The account_id of this Session.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def endpoint_id(self) -> str:
        """Gets the endpoint_id of this Session.

        Id of the OXAP endpoint for this OXAP account

        :return: The endpoint_id of this Session.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id: str):
        """Sets the endpoint_id of this Session.

        Id of the OXAP endpoint for this OXAP account

        :param endpoint_id: The endpoint_id of this Session.
        :type endpoint_id: str
        """

        self._endpoint_id = endpoint_id

    @property
    def role(self) -> str:
        """Gets the role of this Session.

        'The type of account that requests the login. If type is ': * oxap - An OXAP Master administrator having access to multiple endpoints * reseller - A Context reseller managing a context within an endpoint (the endpoint_id is required in data object) * context - A Context administrator managing a context within an endpoint (the endpoint_id is required in data object) * user - An Open-Xchange user account (the endpoint_id is required in data object)

        :return: The role of this Session.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this Session.

        'The type of account that requests the login. If type is ': * oxap - An OXAP Master administrator having access to multiple endpoints * reseller - A Context reseller managing a context within an endpoint (the endpoint_id is required in data object) * context - A Context administrator managing a context within an endpoint (the endpoint_id is required in data object) * user - An Open-Xchange user account (the endpoint_id is required in data object)

        :param role: The role of this Session.
        :type role: str
        """
        allowed_values = ["oxap", "context", "reseller", "user"]
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
