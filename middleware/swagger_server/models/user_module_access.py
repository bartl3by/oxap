# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class UserModuleAccess(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, olox20: bool=None, usm: bool=None, active_sync: bool=None, calendar: bool=None, collect_email_addresses: bool=None, contacts: bool=None, delegate_task: bool=None, denied_portal: bool=None, edit_group: bool=None, edit_password: bool=None, edit_public_folders: bool=None, edit_resource: bool=None, global_address_book_disabled: bool=None, ical: bool=None, infostore: bool=None, multiple_mail_accounts: bool=None, public_folder_editable: bool=None, publication: bool=None, read_create_shared_folders: bool=None, subscription: bool=None, syncml: bool=None, tasks: bool=None, vcard: bool=None, webdav: bool=None, webdav_xml: bool=None, webmail: bool=None):
        """
        UserModuleAccess - a model defined in Swagger

        :param olox20: The olox20 of this UserModuleAccess.
        :type olox20: bool
        :param usm: The usm of this UserModuleAccess.
        :type usm: bool
        :param active_sync: The active_sync of this UserModuleAccess.
        :type active_sync: bool
        :param calendar: The calendar of this UserModuleAccess.
        :type calendar: bool
        :param collect_email_addresses: The collect_email_addresses of this UserModuleAccess.
        :type collect_email_addresses: bool
        :param contacts: The contacts of this UserModuleAccess.
        :type contacts: bool
        :param delegate_task: The delegate_task of this UserModuleAccess.
        :type delegate_task: bool
        :param denied_portal: The denied_portal of this UserModuleAccess.
        :type denied_portal: bool
        :param edit_group: The edit_group of this UserModuleAccess.
        :type edit_group: bool
        :param edit_password: The edit_password of this UserModuleAccess.
        :type edit_password: bool
        :param edit_public_folders: The edit_public_folders of this UserModuleAccess.
        :type edit_public_folders: bool
        :param edit_resource: The edit_resource of this UserModuleAccess.
        :type edit_resource: bool
        :param global_address_book_disabled: The global_address_book_disabled of this UserModuleAccess.
        :type global_address_book_disabled: bool
        :param ical: The ical of this UserModuleAccess.
        :type ical: bool
        :param infostore: The infostore of this UserModuleAccess.
        :type infostore: bool
        :param multiple_mail_accounts: The multiple_mail_accounts of this UserModuleAccess.
        :type multiple_mail_accounts: bool
        :param public_folder_editable: The public_folder_editable of this UserModuleAccess.
        :type public_folder_editable: bool
        :param publication: The publication of this UserModuleAccess.
        :type publication: bool
        :param read_create_shared_folders: The read_create_shared_folders of this UserModuleAccess.
        :type read_create_shared_folders: bool
        :param subscription: The subscription of this UserModuleAccess.
        :type subscription: bool
        :param syncml: The syncml of this UserModuleAccess.
        :type syncml: bool
        :param tasks: The tasks of this UserModuleAccess.
        :type tasks: bool
        :param vcard: The vcard of this UserModuleAccess.
        :type vcard: bool
        :param webdav: The webdav of this UserModuleAccess.
        :type webdav: bool
        :param webdav_xml: The webdav_xml of this UserModuleAccess.
        :type webdav_xml: bool
        :param webmail: The webmail of this UserModuleAccess.
        :type webmail: bool
        """
        self.swagger_types = {
            'olox20': bool,
            'usm': bool,
            'active_sync': bool,
            'calendar': bool,
            'collect_email_addresses': bool,
            'contacts': bool,
            'delegate_task': bool,
            'denied_portal': bool,
            'edit_group': bool,
            'edit_password': bool,
            'edit_public_folders': bool,
            'edit_resource': bool,
            'global_address_book_disabled': bool,
            'ical': bool,
            'infostore': bool,
            'multiple_mail_accounts': bool,
            'public_folder_editable': bool,
            'publication': bool,
            'read_create_shared_folders': bool,
            'subscription': bool,
            'syncml': bool,
            'tasks': bool,
            'vcard': bool,
            'webdav': bool,
            'webdav_xml': bool,
            'webmail': bool
        }

        self.attribute_map = {
            'olox20': 'OLOX20',
            'usm': 'USM',
            'active_sync': 'activeSync',
            'calendar': 'calendar',
            'collect_email_addresses': 'collectEmailAddresses',
            'contacts': 'contacts',
            'delegate_task': 'delegateTask',
            'denied_portal': 'deniedPortal',
            'edit_group': 'editGroup',
            'edit_password': 'editPassword',
            'edit_public_folders': 'editPublicFolders',
            'edit_resource': 'editResource',
            'global_address_book_disabled': 'globalAddressBookDisabled',
            'ical': 'ical',
            'infostore': 'infostore',
            'multiple_mail_accounts': 'multipleMailAccounts',
            'public_folder_editable': 'publicFolderEditable',
            'publication': 'publication',
            'read_create_shared_folders': 'readCreateSharedFolders',
            'subscription': 'subscription',
            'syncml': 'syncml',
            'tasks': 'tasks',
            'vcard': 'vcard',
            'webdav': 'webdav',
            'webdav_xml': 'webdavXml',
            'webmail': 'webmail'
        }

        self._olox20 = olox20
        self._usm = usm
        self._active_sync = active_sync
        self._calendar = calendar
        self._collect_email_addresses = collect_email_addresses
        self._contacts = contacts
        self._delegate_task = delegate_task
        self._denied_portal = denied_portal
        self._edit_group = edit_group
        self._edit_password = edit_password
        self._edit_public_folders = edit_public_folders
        self._edit_resource = edit_resource
        self._global_address_book_disabled = global_address_book_disabled
        self._ical = ical
        self._infostore = infostore
        self._multiple_mail_accounts = multiple_mail_accounts
        self._public_folder_editable = public_folder_editable
        self._publication = publication
        self._read_create_shared_folders = read_create_shared_folders
        self._subscription = subscription
        self._syncml = syncml
        self._tasks = tasks
        self._vcard = vcard
        self._webdav = webdav
        self._webdav_xml = webdav_xml
        self._webmail = webmail

    @classmethod
    def from_dict(cls, dikt) -> 'UserModuleAccess':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserModuleAccess of this UserModuleAccess.
        :rtype: UserModuleAccess
        """
        return deserialize_model(dikt, cls)

    @property
    def olox20(self) -> bool:
        """
        Gets the olox20 of this UserModuleAccess.
        

        :return: The olox20 of this UserModuleAccess.
        :rtype: bool
        """
        return self._olox20

    @olox20.setter
    def olox20(self, olox20: bool):
        """
        Sets the olox20 of this UserModuleAccess.
        

        :param olox20: The olox20 of this UserModuleAccess.
        :type olox20: bool
        """

        self._olox20 = olox20

    @property
    def usm(self) -> bool:
        """
        Gets the usm of this UserModuleAccess.
        

        :return: The usm of this UserModuleAccess.
        :rtype: bool
        """
        return self._usm

    @usm.setter
    def usm(self, usm: bool):
        """
        Sets the usm of this UserModuleAccess.
        

        :param usm: The usm of this UserModuleAccess.
        :type usm: bool
        """

        self._usm = usm

    @property
    def active_sync(self) -> bool:
        """
        Gets the active_sync of this UserModuleAccess.
        

        :return: The active_sync of this UserModuleAccess.
        :rtype: bool
        """
        return self._active_sync

    @active_sync.setter
    def active_sync(self, active_sync: bool):
        """
        Sets the active_sync of this UserModuleAccess.
        

        :param active_sync: The active_sync of this UserModuleAccess.
        :type active_sync: bool
        """

        self._active_sync = active_sync

    @property
    def calendar(self) -> bool:
        """
        Gets the calendar of this UserModuleAccess.
        

        :return: The calendar of this UserModuleAccess.
        :rtype: bool
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar: bool):
        """
        Sets the calendar of this UserModuleAccess.
        

        :param calendar: The calendar of this UserModuleAccess.
        :type calendar: bool
        """

        self._calendar = calendar

    @property
    def collect_email_addresses(self) -> bool:
        """
        Gets the collect_email_addresses of this UserModuleAccess.
        

        :return: The collect_email_addresses of this UserModuleAccess.
        :rtype: bool
        """
        return self._collect_email_addresses

    @collect_email_addresses.setter
    def collect_email_addresses(self, collect_email_addresses: bool):
        """
        Sets the collect_email_addresses of this UserModuleAccess.
        

        :param collect_email_addresses: The collect_email_addresses of this UserModuleAccess.
        :type collect_email_addresses: bool
        """

        self._collect_email_addresses = collect_email_addresses

    @property
    def contacts(self) -> bool:
        """
        Gets the contacts of this UserModuleAccess.
        

        :return: The contacts of this UserModuleAccess.
        :rtype: bool
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts: bool):
        """
        Sets the contacts of this UserModuleAccess.
        

        :param contacts: The contacts of this UserModuleAccess.
        :type contacts: bool
        """

        self._contacts = contacts

    @property
    def delegate_task(self) -> bool:
        """
        Gets the delegate_task of this UserModuleAccess.
        

        :return: The delegate_task of this UserModuleAccess.
        :rtype: bool
        """
        return self._delegate_task

    @delegate_task.setter
    def delegate_task(self, delegate_task: bool):
        """
        Sets the delegate_task of this UserModuleAccess.
        

        :param delegate_task: The delegate_task of this UserModuleAccess.
        :type delegate_task: bool
        """

        self._delegate_task = delegate_task

    @property
    def denied_portal(self) -> bool:
        """
        Gets the denied_portal of this UserModuleAccess.
        

        :return: The denied_portal of this UserModuleAccess.
        :rtype: bool
        """
        return self._denied_portal

    @denied_portal.setter
    def denied_portal(self, denied_portal: bool):
        """
        Sets the denied_portal of this UserModuleAccess.
        

        :param denied_portal: The denied_portal of this UserModuleAccess.
        :type denied_portal: bool
        """

        self._denied_portal = denied_portal

    @property
    def edit_group(self) -> bool:
        """
        Gets the edit_group of this UserModuleAccess.
        

        :return: The edit_group of this UserModuleAccess.
        :rtype: bool
        """
        return self._edit_group

    @edit_group.setter
    def edit_group(self, edit_group: bool):
        """
        Sets the edit_group of this UserModuleAccess.
        

        :param edit_group: The edit_group of this UserModuleAccess.
        :type edit_group: bool
        """

        self._edit_group = edit_group

    @property
    def edit_password(self) -> bool:
        """
        Gets the edit_password of this UserModuleAccess.
        

        :return: The edit_password of this UserModuleAccess.
        :rtype: bool
        """
        return self._edit_password

    @edit_password.setter
    def edit_password(self, edit_password: bool):
        """
        Sets the edit_password of this UserModuleAccess.
        

        :param edit_password: The edit_password of this UserModuleAccess.
        :type edit_password: bool
        """

        self._edit_password = edit_password

    @property
    def edit_public_folders(self) -> bool:
        """
        Gets the edit_public_folders of this UserModuleAccess.
        

        :return: The edit_public_folders of this UserModuleAccess.
        :rtype: bool
        """
        return self._edit_public_folders

    @edit_public_folders.setter
    def edit_public_folders(self, edit_public_folders: bool):
        """
        Sets the edit_public_folders of this UserModuleAccess.
        

        :param edit_public_folders: The edit_public_folders of this UserModuleAccess.
        :type edit_public_folders: bool
        """

        self._edit_public_folders = edit_public_folders

    @property
    def edit_resource(self) -> bool:
        """
        Gets the edit_resource of this UserModuleAccess.
        

        :return: The edit_resource of this UserModuleAccess.
        :rtype: bool
        """
        return self._edit_resource

    @edit_resource.setter
    def edit_resource(self, edit_resource: bool):
        """
        Sets the edit_resource of this UserModuleAccess.
        

        :param edit_resource: The edit_resource of this UserModuleAccess.
        :type edit_resource: bool
        """

        self._edit_resource = edit_resource

    @property
    def global_address_book_disabled(self) -> bool:
        """
        Gets the global_address_book_disabled of this UserModuleAccess.
        

        :return: The global_address_book_disabled of this UserModuleAccess.
        :rtype: bool
        """
        return self._global_address_book_disabled

    @global_address_book_disabled.setter
    def global_address_book_disabled(self, global_address_book_disabled: bool):
        """
        Sets the global_address_book_disabled of this UserModuleAccess.
        

        :param global_address_book_disabled: The global_address_book_disabled of this UserModuleAccess.
        :type global_address_book_disabled: bool
        """

        self._global_address_book_disabled = global_address_book_disabled

    @property
    def ical(self) -> bool:
        """
        Gets the ical of this UserModuleAccess.
        

        :return: The ical of this UserModuleAccess.
        :rtype: bool
        """
        return self._ical

    @ical.setter
    def ical(self, ical: bool):
        """
        Sets the ical of this UserModuleAccess.
        

        :param ical: The ical of this UserModuleAccess.
        :type ical: bool
        """

        self._ical = ical

    @property
    def infostore(self) -> bool:
        """
        Gets the infostore of this UserModuleAccess.
        

        :return: The infostore of this UserModuleAccess.
        :rtype: bool
        """
        return self._infostore

    @infostore.setter
    def infostore(self, infostore: bool):
        """
        Sets the infostore of this UserModuleAccess.
        

        :param infostore: The infostore of this UserModuleAccess.
        :type infostore: bool
        """

        self._infostore = infostore

    @property
    def multiple_mail_accounts(self) -> bool:
        """
        Gets the multiple_mail_accounts of this UserModuleAccess.
        

        :return: The multiple_mail_accounts of this UserModuleAccess.
        :rtype: bool
        """
        return self._multiple_mail_accounts

    @multiple_mail_accounts.setter
    def multiple_mail_accounts(self, multiple_mail_accounts: bool):
        """
        Sets the multiple_mail_accounts of this UserModuleAccess.
        

        :param multiple_mail_accounts: The multiple_mail_accounts of this UserModuleAccess.
        :type multiple_mail_accounts: bool
        """

        self._multiple_mail_accounts = multiple_mail_accounts

    @property
    def public_folder_editable(self) -> bool:
        """
        Gets the public_folder_editable of this UserModuleAccess.
        

        :return: The public_folder_editable of this UserModuleAccess.
        :rtype: bool
        """
        return self._public_folder_editable

    @public_folder_editable.setter
    def public_folder_editable(self, public_folder_editable: bool):
        """
        Sets the public_folder_editable of this UserModuleAccess.
        

        :param public_folder_editable: The public_folder_editable of this UserModuleAccess.
        :type public_folder_editable: bool
        """

        self._public_folder_editable = public_folder_editable

    @property
    def publication(self) -> bool:
        """
        Gets the publication of this UserModuleAccess.
        

        :return: The publication of this UserModuleAccess.
        :rtype: bool
        """
        return self._publication

    @publication.setter
    def publication(self, publication: bool):
        """
        Sets the publication of this UserModuleAccess.
        

        :param publication: The publication of this UserModuleAccess.
        :type publication: bool
        """

        self._publication = publication

    @property
    def read_create_shared_folders(self) -> bool:
        """
        Gets the read_create_shared_folders of this UserModuleAccess.
        

        :return: The read_create_shared_folders of this UserModuleAccess.
        :rtype: bool
        """
        return self._read_create_shared_folders

    @read_create_shared_folders.setter
    def read_create_shared_folders(self, read_create_shared_folders: bool):
        """
        Sets the read_create_shared_folders of this UserModuleAccess.
        

        :param read_create_shared_folders: The read_create_shared_folders of this UserModuleAccess.
        :type read_create_shared_folders: bool
        """

        self._read_create_shared_folders = read_create_shared_folders

    @property
    def subscription(self) -> bool:
        """
        Gets the subscription of this UserModuleAccess.
        

        :return: The subscription of this UserModuleAccess.
        :rtype: bool
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription: bool):
        """
        Sets the subscription of this UserModuleAccess.
        

        :param subscription: The subscription of this UserModuleAccess.
        :type subscription: bool
        """

        self._subscription = subscription

    @property
    def syncml(self) -> bool:
        """
        Gets the syncml of this UserModuleAccess.
        

        :return: The syncml of this UserModuleAccess.
        :rtype: bool
        """
        return self._syncml

    @syncml.setter
    def syncml(self, syncml: bool):
        """
        Sets the syncml of this UserModuleAccess.
        

        :param syncml: The syncml of this UserModuleAccess.
        :type syncml: bool
        """

        self._syncml = syncml

    @property
    def tasks(self) -> bool:
        """
        Gets the tasks of this UserModuleAccess.
        

        :return: The tasks of this UserModuleAccess.
        :rtype: bool
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: bool):
        """
        Sets the tasks of this UserModuleAccess.
        

        :param tasks: The tasks of this UserModuleAccess.
        :type tasks: bool
        """

        self._tasks = tasks

    @property
    def vcard(self) -> bool:
        """
        Gets the vcard of this UserModuleAccess.
        

        :return: The vcard of this UserModuleAccess.
        :rtype: bool
        """
        return self._vcard

    @vcard.setter
    def vcard(self, vcard: bool):
        """
        Sets the vcard of this UserModuleAccess.
        

        :param vcard: The vcard of this UserModuleAccess.
        :type vcard: bool
        """

        self._vcard = vcard

    @property
    def webdav(self) -> bool:
        """
        Gets the webdav of this UserModuleAccess.
        

        :return: The webdav of this UserModuleAccess.
        :rtype: bool
        """
        return self._webdav

    @webdav.setter
    def webdav(self, webdav: bool):
        """
        Sets the webdav of this UserModuleAccess.
        

        :param webdav: The webdav of this UserModuleAccess.
        :type webdav: bool
        """

        self._webdav = webdav

    @property
    def webdav_xml(self) -> bool:
        """
        Gets the webdav_xml of this UserModuleAccess.
        

        :return: The webdav_xml of this UserModuleAccess.
        :rtype: bool
        """
        return self._webdav_xml

    @webdav_xml.setter
    def webdav_xml(self, webdav_xml: bool):
        """
        Sets the webdav_xml of this UserModuleAccess.
        

        :param webdav_xml: The webdav_xml of this UserModuleAccess.
        :type webdav_xml: bool
        """

        self._webdav_xml = webdav_xml

    @property
    def webmail(self) -> bool:
        """
        Gets the webmail of this UserModuleAccess.
        

        :return: The webmail of this UserModuleAccess.
        :rtype: bool
        """
        return self._webmail

    @webmail.setter
    def webmail(self, webmail: bool):
        """
        Sets the webmail of this UserModuleAccess.
        

        :param webmail: The webmail of this UserModuleAccess.
        :type webmail: bool
        """

        self._webmail = webmail

