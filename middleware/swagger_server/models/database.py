# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Database(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_weight: int=None, current_units: int=None, driver: str=None, id: int=None, login: str=None, master: bool=None, master_id: int=None, max_units: int=None, name: str=None, password: str=None, pool_hard_limit: int=None, pool_initial: int=None, pool_max: int=None, read_id: int=None, scheme: str=None, url: str=None):
        """
        Database - a model defined in Swagger

        :param cluster_weight: The cluster_weight of this Database.
        :type cluster_weight: int
        :param current_units: The current_units of this Database.
        :type current_units: int
        :param driver: The driver of this Database.
        :type driver: str
        :param id: The id of this Database.
        :type id: int
        :param login: The login of this Database.
        :type login: str
        :param master: The master of this Database.
        :type master: bool
        :param master_id: The master_id of this Database.
        :type master_id: int
        :param max_units: The max_units of this Database.
        :type max_units: int
        :param name: The name of this Database.
        :type name: str
        :param password: The password of this Database.
        :type password: str
        :param pool_hard_limit: The pool_hard_limit of this Database.
        :type pool_hard_limit: int
        :param pool_initial: The pool_initial of this Database.
        :type pool_initial: int
        :param pool_max: The pool_max of this Database.
        :type pool_max: int
        :param read_id: The read_id of this Database.
        :type read_id: int
        :param scheme: The scheme of this Database.
        :type scheme: str
        :param url: The url of this Database.
        :type url: str
        """
        self.swagger_types = {
            'cluster_weight': int,
            'current_units': int,
            'driver': str,
            'id': int,
            'login': str,
            'master': bool,
            'master_id': int,
            'max_units': int,
            'name': str,
            'password': str,
            'pool_hard_limit': int,
            'pool_initial': int,
            'pool_max': int,
            'read_id': int,
            'scheme': str,
            'url': str
        }

        self.attribute_map = {
            'cluster_weight': 'clusterWeight',
            'current_units': 'currentUnits',
            'driver': 'driver',
            'id': 'id',
            'login': 'login',
            'master': 'master',
            'master_id': 'masterId',
            'max_units': 'maxUnits',
            'name': 'name',
            'password': 'password',
            'pool_hard_limit': 'poolHardLimit',
            'pool_initial': 'poolInitial',
            'pool_max': 'poolMax',
            'read_id': 'read_id',
            'scheme': 'scheme',
            'url': 'url'
        }

        self._cluster_weight = cluster_weight
        self._current_units = current_units
        self._driver = driver
        self._id = id
        self._login = login
        self._master = master
        self._master_id = master_id
        self._max_units = max_units
        self._name = name
        self._password = password
        self._pool_hard_limit = pool_hard_limit
        self._pool_initial = pool_initial
        self._pool_max = pool_max
        self._read_id = read_id
        self._scheme = scheme
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Database':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Database of this Database.
        :rtype: Database
        """
        return deserialize_model(dikt, cls)

    @property
    def cluster_weight(self) -> int:
        """
        Gets the cluster_weight of this Database.
        The clusterWeight of the database object

        :return: The cluster_weight of this Database.
        :rtype: int
        """
        return self._cluster_weight

    @cluster_weight.setter
    def cluster_weight(self, cluster_weight: int):
        """
        Sets the cluster_weight of this Database.
        The clusterWeight of the database object

        :param cluster_weight: The cluster_weight of this Database.
        :type cluster_weight: int
        """

        self._cluster_weight = cluster_weight

    @property
    def current_units(self) -> int:
        """
        Gets the current_units of this Database.
        The currentUnits of the database object

        :return: The current_units of this Database.
        :rtype: int
        """
        return self._current_units

    @current_units.setter
    def current_units(self, current_units: int):
        """
        Sets the current_units of this Database.
        The currentUnits of the database object

        :param current_units: The current_units of this Database.
        :type current_units: int
        """

        self._current_units = current_units

    @property
    def driver(self) -> str:
        """
        Gets the driver of this Database.
        The driver of the database object

        :return: The driver of this Database.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """
        Sets the driver of this Database.
        The driver of the database object

        :param driver: The driver of this Database.
        :type driver: str
        """

        self._driver = driver

    @property
    def id(self) -> int:
        """
        Gets the id of this Database.
        The id of the database object

        :return: The id of this Database.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Database.
        The id of the database object

        :param id: The id of this Database.
        :type id: int
        """

        self._id = id

    @property
    def login(self) -> str:
        """
        Gets the login of this Database.
        The login of the database object

        :return: The login of this Database.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login: str):
        """
        Sets the login of this Database.
        The login of the database object

        :param login: The login of this Database.
        :type login: str
        """

        self._login = login

    @property
    def master(self) -> bool:
        """
        Gets the master of this Database.
        The master flag of the database object

        :return: The master of this Database.
        :rtype: bool
        """
        return self._master

    @master.setter
    def master(self, master: bool):
        """
        Sets the master of this Database.
        The master flag of the database object

        :param master: The master of this Database.
        :type master: bool
        """
        if master is None:
            raise ValueError("Invalid value for `master`, must not be `None`")

        self._master = master

    @property
    def master_id(self) -> int:
        """
        Gets the master_id of this Database.
        The master id reference of the database object

        :return: The master_id of this Database.
        :rtype: int
        """
        return self._master_id

    @master_id.setter
    def master_id(self, master_id: int):
        """
        Sets the master_id of this Database.
        The master id reference of the database object

        :param master_id: The master_id of this Database.
        :type master_id: int
        """

        self._master_id = master_id

    @property
    def max_units(self) -> int:
        """
        Gets the max_units of this Database.
        The maxUnits of the database object

        :return: The max_units of this Database.
        :rtype: int
        """
        return self._max_units

    @max_units.setter
    def max_units(self, max_units: int):
        """
        Sets the max_units of this Database.
        The maxUnits of the database object

        :param max_units: The max_units of this Database.
        :type max_units: int
        """

        self._max_units = max_units

    @property
    def name(self) -> str:
        """
        Gets the name of this Database.
        The name of the database object

        :return: The name of this Database.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Database.
        The name of the database object

        :param name: The name of this Database.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self) -> str:
        """
        Gets the password of this Database.
        The password of the database object

        :return: The password of this Database.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """
        Sets the password of this Database.
        The password of the database object

        :param password: The password of this Database.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def pool_hard_limit(self) -> int:
        """
        Gets the pool_hard_limit of this Database.
        The poolHardLimit of the database object

        :return: The pool_hard_limit of this Database.
        :rtype: int
        """
        return self._pool_hard_limit

    @pool_hard_limit.setter
    def pool_hard_limit(self, pool_hard_limit: int):
        """
        Sets the pool_hard_limit of this Database.
        The poolHardLimit of the database object

        :param pool_hard_limit: The pool_hard_limit of this Database.
        :type pool_hard_limit: int
        """

        self._pool_hard_limit = pool_hard_limit

    @property
    def pool_initial(self) -> int:
        """
        Gets the pool_initial of this Database.
        The poolInitial of the database object

        :return: The pool_initial of this Database.
        :rtype: int
        """
        return self._pool_initial

    @pool_initial.setter
    def pool_initial(self, pool_initial: int):
        """
        Sets the pool_initial of this Database.
        The poolInitial of the database object

        :param pool_initial: The pool_initial of this Database.
        :type pool_initial: int
        """

        self._pool_initial = pool_initial

    @property
    def pool_max(self) -> int:
        """
        Gets the pool_max of this Database.
        The poolMax of the database object

        :return: The pool_max of this Database.
        :rtype: int
        """
        return self._pool_max

    @pool_max.setter
    def pool_max(self, pool_max: int):
        """
        Sets the pool_max of this Database.
        The poolMax of the database object

        :param pool_max: The pool_max of this Database.
        :type pool_max: int
        """

        self._pool_max = pool_max

    @property
    def read_id(self) -> int:
        """
        Gets the read_id of this Database.
        The database read id reference of the database object

        :return: The read_id of this Database.
        :rtype: int
        """
        return self._read_id

    @read_id.setter
    def read_id(self, read_id: int):
        """
        Sets the read_id of this Database.
        The database read id reference of the database object

        :param read_id: The read_id of this Database.
        :type read_id: int
        """

        self._read_id = read_id

    @property
    def scheme(self) -> str:
        """
        Gets the scheme of this Database.
        The scheme of the database object

        :return: The scheme of this Database.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme: str):
        """
        Sets the scheme of this Database.
        The scheme of the database object

        :param scheme: The scheme of this Database.
        :type scheme: str
        """

        self._scheme = scheme

    @property
    def url(self) -> str:
        """
        Gets the url of this Database.
        The url of the database object

        :return: The url of this Database.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """
        Sets the url of this Database.
        The url of the database object

        :param url: The url of this Database.
        :type url: str
        """

        self._url = url

